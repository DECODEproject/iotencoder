// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datastore.proto

package datastore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// WriteRequest is the message that is sent to the store in order to write
// data. Data is written keyed by the public key of the recipient, the id of
// the user, as well as an id representing the entitlement policy. Finally the
// encrypted data is sent as a chunk of bytes.
type WriteRequest struct {
	// The public key is the key identifying the party for which data has been
	// encrypted.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The data field here is the encrypted data to be stored for the specified
	// public key/entitlement policy. From the datastore's perspective this can
	// just be a slice of bytes, however zenroom does permit this data to
	// maintain some structure. From the datastores perspective however it treats
	// this data as a completely opaque bytes.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteRequest) Reset()         { *m = WriteRequest{} }
func (m *WriteRequest) String() string { return proto.CompactTextString(m) }
func (*WriteRequest) ProtoMessage()    {}
func (*WriteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_459485a8eb3bc1e2, []int{0}
}
func (m *WriteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteRequest.Unmarshal(m, b)
}
func (m *WriteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteRequest.Marshal(b, m, deterministic)
}
func (dst *WriteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteRequest.Merge(dst, src)
}
func (m *WriteRequest) XXX_Size() int {
	return xxx_messageInfo_WriteRequest.Size(m)
}
func (m *WriteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WriteRequest proto.InternalMessageInfo

func (m *WriteRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *WriteRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// WriteResponse is a placeholder message returned from the call to write data
// to the store. Currently no fields have been identified, but keeping this as
// a separate type allows us to add fields as we identify them.
type WriteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WriteResponse) Reset()         { *m = WriteResponse{} }
func (m *WriteResponse) String() string { return proto.CompactTextString(m) }
func (*WriteResponse) ProtoMessage()    {}
func (*WriteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_459485a8eb3bc1e2, []int{1}
}
func (m *WriteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WriteResponse.Unmarshal(m, b)
}
func (m *WriteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WriteResponse.Marshal(b, m, deterministic)
}
func (dst *WriteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WriteResponse.Merge(dst, src)
}
func (m *WriteResponse) XXX_Size() int {
	return xxx_messageInfo_WriteResponse.Size(m)
}
func (m *WriteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WriteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WriteResponse proto.InternalMessageInfo

// ReadRequest is the message that is sent to the store in order to read data
// for a specific bucket. When requesting data a client must submit the public
// key and entitlement policy id which identify the bucket, then optional start
// and end timestamps. If the time attributes are included then the end time
// must be after the start time; if no end time is specified then the default is
// "now". It is an error to specify an end time without a start time.
type ReadRequest struct {
	// The public key is the key identifying the party for which data has been
	// encrypted. This field is required.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The start time represents the start of an interval for which we wish to
	// read data. It is an error for start_time to be in the future or to be
	// after end_time. This field is required.
	StartTime *timestamp.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// The end time represents the end of an interval for which we wish to read
	// data. It may be nil, in which case it defaults to "now".
	EndTime *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	// The page cursor is an opaque string that an implementing server can
	// understand in order to efficiently paginate through events.  The value
	// sent here cannot be calculated by the client, rather they should just
	// inspect value returned from a previous call to to `ReadData` and if this a
	// non-empty string, then this value can be sent back to the server to get
	// the "next" page of results.  This field is optional.
	PageCursor string `protobuf:"bytes,4,opt,name=page_cursor,json=pageCursor,proto3" json:"page_cursor,omitempty"`
	// The maximum number of encrypted events to return in the response. The
	// default value is 500. Returns an error if the caller requests a larger
	// page size than the maximum.
	PageSize             uint32   `protobuf:"varint,5,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadRequest) Reset()         { *m = ReadRequest{} }
func (m *ReadRequest) String() string { return proto.CompactTextString(m) }
func (*ReadRequest) ProtoMessage()    {}
func (*ReadRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_459485a8eb3bc1e2, []int{2}
}
func (m *ReadRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadRequest.Unmarshal(m, b)
}
func (m *ReadRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadRequest.Marshal(b, m, deterministic)
}
func (dst *ReadRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadRequest.Merge(dst, src)
}
func (m *ReadRequest) XXX_Size() int {
	return xxx_messageInfo_ReadRequest.Size(m)
}
func (m *ReadRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadRequest proto.InternalMessageInfo

func (m *ReadRequest) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ReadRequest) GetStartTime() *timestamp.Timestamp {
	if m != nil {
		return m.StartTime
	}
	return nil
}

func (m *ReadRequest) GetEndTime() *timestamp.Timestamp {
	if m != nil {
		return m.EndTime
	}
	return nil
}

func (m *ReadRequest) GetPageCursor() string {
	if m != nil {
		return m.PageCursor
	}
	return ""
}

func (m *ReadRequest) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

// EncryptedEvent is a message representing a single instance of encrypted data
// that is stored by the datastore. When reading data we return lists of this
// type, which comprise a timestamp and a chunk of encoded data. From the
// datastore's perspective the encrypted data can be viewed as just an opaque
// chunk of bytes, however our encoding engine (Zenroom), does allow us to just
// encrypt the values within a JSON structure, but for the datastore's purposes
// we don't care about this.
type EncryptedEvent struct {
	// The time at which the event was recorded by the datastore.
	EventTime *timestamp.Timestamp `protobuf:"bytes,1,opt,name=event_time,json=eventTime,proto3" json:"event_time,omitempty"`
	// The opaque chunk of bytes comprising the encoded data from the device.
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EncryptedEvent) Reset()         { *m = EncryptedEvent{} }
func (m *EncryptedEvent) String() string { return proto.CompactTextString(m) }
func (*EncryptedEvent) ProtoMessage()    {}
func (*EncryptedEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_459485a8eb3bc1e2, []int{3}
}
func (m *EncryptedEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EncryptedEvent.Unmarshal(m, b)
}
func (m *EncryptedEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EncryptedEvent.Marshal(b, m, deterministic)
}
func (dst *EncryptedEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EncryptedEvent.Merge(dst, src)
}
func (m *EncryptedEvent) XXX_Size() int {
	return xxx_messageInfo_EncryptedEvent.Size(m)
}
func (m *EncryptedEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_EncryptedEvent.DiscardUnknown(m)
}

var xxx_messageInfo_EncryptedEvent proto.InternalMessageInfo

func (m *EncryptedEvent) GetEventTime() *timestamp.Timestamp {
	if m != nil {
		return m.EventTime
	}
	return nil
}

func (m *EncryptedEvent) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// ReadResponse is the top level message returned by the read operations to the
// datastore. It contains the public key for the recipient, as well as the
// entitlement policy id. The events property contains a list of encrypted
// events in ascending time order. This will not necessarily be all possible
// events for the requested time period, as we have implemented pagination for
// this endpoint. If the response contains a non-empty string for the
// next_page_cursor property, then there are more pages of data to be consumed;
// if this property is the empty string, then the response is all data available
// for the requested time period.
type ReadResponse struct {
	// The public key of the recipient for which data is being requested. This
	// field will always have a non-empty value.
	PublicKey string `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// The list of encrypted events containing the actual data being requested.
	// This list will be returned in ascending time order, and each element
	// contains a timestamp as well as the actual chunk of encrypted data. If no
	// data is available this will be an empty list.
	Events []*EncryptedEvent `protobuf:"bytes,2,rep,name=events,proto3" json:"events,omitempty"`
	// An optional field containing a pointer to the next page of results
	// expressed as an opaque string. Clients should not expect to be able to
	// parse this string as its contents are strictly implementation specific and
	// subject to change at any time. Rather the value here should just be checked
	// to see if it is an empty string or contains a value, and if any value is
	// present, the client can pass it back in a new read request as the value of
	// the page_cursor field.
	NextPageCursor string `protobuf:"bytes,3,opt,name=next_page_cursor,json=nextPageCursor,proto3" json:"next_page_cursor,omitempty"`
	// The page size that was originally requested to create this response.
	// Supplied to make it easy for the client to construct a new request for the
	// next page.
	PageSize             uint32   `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadResponse) Reset()         { *m = ReadResponse{} }
func (m *ReadResponse) String() string { return proto.CompactTextString(m) }
func (*ReadResponse) ProtoMessage()    {}
func (*ReadResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_datastore_459485a8eb3bc1e2, []int{4}
}
func (m *ReadResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadResponse.Unmarshal(m, b)
}
func (m *ReadResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadResponse.Marshal(b, m, deterministic)
}
func (dst *ReadResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadResponse.Merge(dst, src)
}
func (m *ReadResponse) XXX_Size() int {
	return xxx_messageInfo_ReadResponse.Size(m)
}
func (m *ReadResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadResponse proto.InternalMessageInfo

func (m *ReadResponse) GetPublicKey() string {
	if m != nil {
		return m.PublicKey
	}
	return ""
}

func (m *ReadResponse) GetEvents() []*EncryptedEvent {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *ReadResponse) GetNextPageCursor() string {
	if m != nil {
		return m.NextPageCursor
	}
	return ""
}

func (m *ReadResponse) GetPageSize() uint32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func init() {
	proto.RegisterType((*WriteRequest)(nil), "decode.iot.datastore.WriteRequest")
	proto.RegisterType((*WriteResponse)(nil), "decode.iot.datastore.WriteResponse")
	proto.RegisterType((*ReadRequest)(nil), "decode.iot.datastore.ReadRequest")
	proto.RegisterType((*EncryptedEvent)(nil), "decode.iot.datastore.EncryptedEvent")
	proto.RegisterType((*ReadResponse)(nil), "decode.iot.datastore.ReadResponse")
}

func init() { proto.RegisterFile("datastore.proto", fileDescriptor_datastore_459485a8eb3bc1e2) }

var fileDescriptor_datastore_459485a8eb3bc1e2 = []byte{
	// 398 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0x4d, 0x6f, 0xda, 0x40,
	0x14, 0xd4, 0x02, 0xa5, 0xf8, 0x99, 0x8f, 0x6a, 0xd5, 0x83, 0xe5, 0xaa, 0xc2, 0x75, 0x7b, 0xf0,
	0x69, 0x91, 0xa8, 0x7a, 0xa8, 0xd4, 0x4b, 0xdb, 0x70, 0xca, 0x25, 0x71, 0x90, 0x22, 0xe5, 0x62,
	0x19, 0xfb, 0x05, 0x59, 0x01, 0xaf, 0xe3, 0x5d, 0x47, 0x81, 0x9f, 0x15, 0xe5, 0xe7, 0xe4, 0xc7,
	0x44, 0xbb, 0x0b, 0x08, 0x24, 0x07, 0x72, 0x5b, 0xcf, 0xce, 0xcc, 0xce, 0x1b, 0x3f, 0x18, 0xa4,
	0xb1, 0x8c, 0x85, 0xe4, 0x25, 0xb2, 0xa2, 0xe4, 0x92, 0xd3, 0xcf, 0x29, 0x26, 0x3c, 0x45, 0x96,
	0x71, 0xc9, 0x76, 0x77, 0xee, 0x70, 0xce, 0xf9, 0x7c, 0x81, 0x23, 0xcd, 0x99, 0x55, 0xb7, 0x23,
	0x99, 0x2d, 0x51, 0xc8, 0x78, 0x59, 0x18, 0x99, 0xff, 0x17, 0xba, 0xd7, 0x65, 0x26, 0x31, 0xc4,
	0xfb, 0x0a, 0x85, 0xa4, 0x5f, 0x01, 0x8a, 0x6a, 0xb6, 0xc8, 0x92, 0xe8, 0x0e, 0x57, 0x0e, 0xf1,
	0x48, 0x60, 0x85, 0x96, 0x41, 0xce, 0x71, 0x45, 0x29, 0xb4, 0x94, 0xb9, 0xd3, 0xf0, 0x48, 0xd0,
	0x0d, 0xf5, 0xd9, 0x1f, 0x40, 0x6f, 0x63, 0x21, 0x0a, 0x9e, 0x0b, 0xf4, 0x5f, 0x08, 0xd8, 0x21,
	0xc6, 0xe9, 0x3b, 0x3d, 0x7f, 0x03, 0x08, 0x19, 0x97, 0x32, 0x52, 0xd9, 0xb4, 0xb3, 0x3d, 0x76,
	0x99, 0x09, 0xce, 0xb6, 0xc1, 0xd9, 0x74, 0x1b, 0x3c, 0xb4, 0x34, 0x5b, 0x7d, 0xd3, 0x5f, 0xd0,
	0xc1, 0x3c, 0x35, 0xc2, 0xe6, 0x49, 0xe1, 0x47, 0xcc, 0x53, 0x2d, 0x1b, 0x82, 0x5d, 0xc4, 0x73,
	0x8c, 0x92, 0xaa, 0x14, 0xbc, 0x74, 0x5a, 0x3a, 0x11, 0x28, 0xe8, 0xbf, 0x46, 0xe8, 0x17, 0xb0,
	0x34, 0x41, 0x64, 0x6b, 0x74, 0x3e, 0x78, 0x24, 0xe8, 0x85, 0x1d, 0x05, 0x5c, 0x65, 0x6b, 0xf4,
	0x23, 0xe8, 0x4f, 0xf2, 0xa4, 0x5c, 0x15, 0x12, 0xd3, 0xc9, 0x03, 0xe6, 0x52, 0x4d, 0x80, 0xea,
	0x60, 0x82, 0x90, 0xd3, 0x13, 0x68, 0xb6, 0x8e, 0x52, 0x57, 0xe8, 0x13, 0x81, 0xae, 0xe9, 0xcf,
	0x14, 0x7a, 0xaa, 0xc0, 0x3f, 0xd0, 0xd6, 0x86, 0xc2, 0x69, 0x78, 0xcd, 0xc0, 0x1e, 0xff, 0x60,
	0x75, 0xbb, 0xc0, 0x0e, 0x43, 0x87, 0x1b, 0x0d, 0x0d, 0xe0, 0x53, 0x8e, 0x8f, 0x32, 0xda, 0x6f,
	0xa4, 0xa9, 0x9f, 0xe8, 0x2b, 0xfc, 0xe2, 0x8d, 0x56, 0x5a, 0x87, 0xad, 0x8c, 0x9f, 0x09, 0x58,
	0x67, 0xdb, 0xb7, 0xe8, 0x14, 0x2c, 0xbd, 0x13, 0x0a, 0xa1, 0x7e, 0x7d, 0x9e, 0xfd, 0xbd, 0x73,
	0xbf, 0x1f, 0xe5, 0x6c, 0x7a, 0xb8, 0x84, 0x8e, 0xea, 0x45, 0x9b, 0x7e, 0xab, 0x17, 0xec, 0xed,
	0x9d, 0xeb, 0x1f, 0xa3, 0x18, 0xcb, 0x7f, 0xf6, 0x8d, 0xb5, 0xbb, 0x99, 0xb5, 0xf5, 0xbf, 0xfa,
	0xf9, 0x1a, 0x00, 0x00, 0xff, 0xff, 0xc1, 0x8b, 0x47, 0x95, 0x5d, 0x03, 0x00, 0x00,
}
