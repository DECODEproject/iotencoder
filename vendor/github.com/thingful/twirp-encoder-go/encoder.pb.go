// Code generated by protoc-gen-go. DO NOT EDIT.
// source: encoder.proto

/*
Package encoder is a generated protocol buffer package.

It is generated from these files:
	encoder.proto

It has these top-level messages:
	CreateStreamRequest
	CreateStreamResponse
	DeleteStreamRequest
	DeleteStreamResponse
*/
package encoder

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// An enumeration which allows us to express whether the device will be
// located indoors or outdoors when deployed.
type CreateStreamRequest_Exposure int32

const (
	CreateStreamRequest_INDOOR  CreateStreamRequest_Exposure = 0
	CreateStreamRequest_OUTDOOR CreateStreamRequest_Exposure = 1
)

var CreateStreamRequest_Exposure_name = map[int32]string{
	0: "INDOOR",
	1: "OUTDOOR",
}
var CreateStreamRequest_Exposure_value = map[string]int32{
	"INDOOR":  0,
	"OUTDOOR": 1,
}

func (x CreateStreamRequest_Exposure) String() string {
	return proto.EnumName(CreateStreamRequest_Exposure_name, int32(x))
}
func (CreateStreamRequest_Exposure) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

// An enumeration which allows us to specify what type of sharing is to be
// defined for the specified sensor type. The default value is `SHARE` which
// implies sharing the data at full resolution. If this type is specified, it
// is an error if either of `buckets` or `interval` is also supplied.
type CreateStreamRequest_Entitlement_Action int32

const (
	CreateStreamRequest_Entitlement_SHARE      CreateStreamRequest_Entitlement_Action = 0
	CreateStreamRequest_Entitlement_BIN        CreateStreamRequest_Entitlement_Action = 1
	CreateStreamRequest_Entitlement_MOVING_AVG CreateStreamRequest_Entitlement_Action = 2
)

var CreateStreamRequest_Entitlement_Action_name = map[int32]string{
	0: "SHARE",
	1: "BIN",
	2: "MOVING_AVG",
}
var CreateStreamRequest_Entitlement_Action_value = map[string]int32{
	"SHARE":      0,
	"BIN":        1,
	"MOVING_AVG": 2,
}

func (x CreateStreamRequest_Entitlement_Action) String() string {
	return proto.EnumName(CreateStreamRequest_Entitlement_Action_name, int32(x))
}
func (CreateStreamRequest_Entitlement_Action) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1, 0}
}

// CreateStreamRequest is the message sent in order to create a new encoded
// stream. As a result of this method call, the stream encoder will have
// configured a stream that receives messages, applies all defined entitlement
// operations, then encrypts the data and sends it on to the configured
// datastore.
type CreateStreamRequest struct {
	// The address of the MQTT broker to which we should subscribe.
	// This is a required field.
	BrokerAddress string `protobuf:"bytes,1,opt,name=broker_address,json=brokerAddress" json:"broker_address,omitempty"`
	// The topic to which the encoder must subscribe - this will typically just be
	// the device_token sent from the client to start the process.
	// This is a required field.
	DeviceTopic string `protobuf:"bytes,2,opt,name=device_topic,json=deviceTopic" json:"device_topic,omitempty"`
	// The private key for the device which the encoder will use in order to
	// encrypt data for the recipient.
	// This is a required field.
	DevicePrivateKey string `protobuf:"bytes,3,opt,name=device_private_key,json=devicePrivateKey" json:"device_private_key,omitempty"`
	// The public key of the recipient, again this is used in order to encrypt
	// outgoing data, as well as being used to signify to the datastore the bucket
	// in which data should be stored.
	// This is a required field.
	RecipientPublicKey string `protobuf:"bytes,4,opt,name=recipient_public_key,json=recipientPublicKey" json:"recipient_public_key,omitempty"`
	// The identifier of the user for which the stream is being created. This is
	// included as we also need to tell this information to the datastore so that
	// data for this user can be deleted if they so desire.
	// This is a required field.
	UserUid string `protobuf:"bytes,5,opt,name=user_uid,json=userUid" json:"user_uid,omitempty"`
	// The location of the device to be claimed.
	Location *CreateStreamRequest_Location `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
	// The specific exposure of the device, i.e. is this instance indoors or
	// outdoors.
	Exposure CreateStreamRequest_Exposure `protobuf:"varint,7,opt,name=exposure,enum=encoder.CreateStreamRequest_Exposure" json:"exposure,omitempty"`
	// The entitlements field holds a repeated list of Entitlement instances which
	// each define a transformation operation for a specific sensor id. If no
	// entitlements are submitted, we currently create a stream that writes
	// through all received channels without applying any processing operations to
	// the data, but if this field contains any elements, the resulting stream
	// will only contain the specified sensor type.
	Entitlements []*CreateStreamRequest_Entitlement `protobuf:"bytes,8,rep,name=entitlements" json:"entitlements,omitempty"`
}

func (m *CreateStreamRequest) Reset()                    { *m = CreateStreamRequest{} }
func (m *CreateStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateStreamRequest) ProtoMessage()               {}
func (*CreateStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateStreamRequest) GetBrokerAddress() string {
	if m != nil {
		return m.BrokerAddress
	}
	return ""
}

func (m *CreateStreamRequest) GetDeviceTopic() string {
	if m != nil {
		return m.DeviceTopic
	}
	return ""
}

func (m *CreateStreamRequest) GetDevicePrivateKey() string {
	if m != nil {
		return m.DevicePrivateKey
	}
	return ""
}

func (m *CreateStreamRequest) GetRecipientPublicKey() string {
	if m != nil {
		return m.RecipientPublicKey
	}
	return ""
}

func (m *CreateStreamRequest) GetUserUid() string {
	if m != nil {
		return m.UserUid
	}
	return ""
}

func (m *CreateStreamRequest) GetLocation() *CreateStreamRequest_Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *CreateStreamRequest) GetExposure() CreateStreamRequest_Exposure {
	if m != nil {
		return m.Exposure
	}
	return CreateStreamRequest_INDOOR
}

func (m *CreateStreamRequest) GetEntitlements() []*CreateStreamRequest_Entitlement {
	if m != nil {
		return m.Entitlements
	}
	return nil
}

// A nested type capturing the location of the device expressed via decimal
// long/lat pair.
type CreateStreamRequest_Location struct {
	// The longitude expressed as a decimal.
	Longitude float64 `protobuf:"fixed64,1,opt,name=longitude" json:"longitude,omitempty"`
	// The latitude expressed as a decimal.
	Latitude float64 `protobuf:"fixed64,2,opt,name=latitude" json:"latitude,omitempty"`
}

func (m *CreateStreamRequest_Location) Reset()                    { *m = CreateStreamRequest_Location{} }
func (m *CreateStreamRequest_Location) String() string            { return proto.CompactTextString(m) }
func (*CreateStreamRequest_Location) ProtoMessage()               {}
func (*CreateStreamRequest_Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *CreateStreamRequest_Location) GetLongitude() float64 {
	if m != nil {
		return m.Longitude
	}
	return 0
}

func (m *CreateStreamRequest_Location) GetLatitude() float64 {
	if m != nil {
		return m.Latitude
	}
	return 0
}

// A nested type which is used to capture a list of specific entitlements we
// define for the stream.
type CreateStreamRequest_Entitlement struct {
	// The unique id of the sensor type for which this specific configuration is
	// defined. This is a required field.
	SensorId uint32 `protobuf:"varint,1,opt,name=sensor_id,json=sensorId" json:"sensor_id,omitempty"`
	// The specific action this entitlement defines for the sensor type. This is a
	// required field.
	Action CreateStreamRequest_Entitlement_Action `protobuf:"varint,2,opt,name=action,enum=encoder.CreateStreamRequest_Entitlement_Action" json:"action,omitempty"`
	// The bins attribute is used to specify the the bins into which incoming
	// values should be classified. Each element in the list is the upper
	// inclusive bound of a bin. The values submitted must be sorted in strictly
	// increasing order. There is no need to add a highest bin with +Inf bound, it
	// will be added implicitly. This field is optional unless an Action of `BIN`
	// has been requested, in which case it is required. It is an error to send
	// values for this attribute unless the value of Action is `BIN`.
	Bins []float64 `protobuf:"fixed64,3,rep,packed,name=bins" json:"bins,omitempty"`
	// This attribute is used to control the entitlement in the case for which we
	// have specified an action type representing a moving average. It represents
	// the interval in seconds over which the moving average should be calculated,
	// e.g. for a 15 minute moving average the value supplied here would be 900.
	// This field is optional unless an Action of `MOVING_AVG` has been specified,
	// in which case it is required. It is an error to send a value for this
	// attribute unless the value of Action is `MOVING_AVG`.
	Interval uint32 `protobuf:"varint,4,opt,name=interval" json:"interval,omitempty"`
}

func (m *CreateStreamRequest_Entitlement) Reset()         { *m = CreateStreamRequest_Entitlement{} }
func (m *CreateStreamRequest_Entitlement) String() string { return proto.CompactTextString(m) }
func (*CreateStreamRequest_Entitlement) ProtoMessage()    {}
func (*CreateStreamRequest_Entitlement) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 1}
}

func (m *CreateStreamRequest_Entitlement) GetSensorId() uint32 {
	if m != nil {
		return m.SensorId
	}
	return 0
}

func (m *CreateStreamRequest_Entitlement) GetAction() CreateStreamRequest_Entitlement_Action {
	if m != nil {
		return m.Action
	}
	return CreateStreamRequest_Entitlement_SHARE
}

func (m *CreateStreamRequest_Entitlement) GetBins() []float64 {
	if m != nil {
		return m.Bins
	}
	return nil
}

func (m *CreateStreamRequest_Entitlement) GetInterval() uint32 {
	if m != nil {
		return m.Interval
	}
	return 0
}

// CreateStreamResponse is the message returned from the stream encoder after it
// successfully creates a stream. The device registration service should keep a
// record of this value so that it is able to delete the stream if required.
type CreateStreamResponse struct {
	// An identifier for the stream which can be used in order to delete a stream
	// when required.
	StreamUid string `protobuf:"bytes,1,opt,name=stream_uid,json=streamUid" json:"stream_uid,omitempty"`
}

func (m *CreateStreamResponse) Reset()                    { *m = CreateStreamResponse{} }
func (m *CreateStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateStreamResponse) ProtoMessage()               {}
func (*CreateStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *CreateStreamResponse) GetStreamUid() string {
	if m != nil {
		return m.StreamUid
	}
	return ""
}

// DeleteStreamRequest is the message sent to the encoder in order to delete a
// configured stream. Sending this message must delete the MQTT subscription, as
// well as deleting all encryption credentials stored on the encoder.
type DeleteStreamRequest struct {
	// The identifier for the stream to be deleted.
	StreamUid string `protobuf:"bytes,1,opt,name=stream_uid,json=streamUid" json:"stream_uid,omitempty"`
}

func (m *DeleteStreamRequest) Reset()                    { *m = DeleteStreamRequest{} }
func (m *DeleteStreamRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteStreamRequest) ProtoMessage()               {}
func (*DeleteStreamRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DeleteStreamRequest) GetStreamUid() string {
	if m != nil {
		return m.StreamUid
	}
	return ""
}

// DeleteStreamResponse is a placeholder response message on a successful
// deletion of stream on the encoder.
type DeleteStreamResponse struct {
}

func (m *DeleteStreamResponse) Reset()                    { *m = DeleteStreamResponse{} }
func (m *DeleteStreamResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteStreamResponse) ProtoMessage()               {}
func (*DeleteStreamResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*CreateStreamRequest)(nil), "encoder.CreateStreamRequest")
	proto.RegisterType((*CreateStreamRequest_Location)(nil), "encoder.CreateStreamRequest.Location")
	proto.RegisterType((*CreateStreamRequest_Entitlement)(nil), "encoder.CreateStreamRequest.Entitlement")
	proto.RegisterType((*CreateStreamResponse)(nil), "encoder.CreateStreamResponse")
	proto.RegisterType((*DeleteStreamRequest)(nil), "encoder.DeleteStreamRequest")
	proto.RegisterType((*DeleteStreamResponse)(nil), "encoder.DeleteStreamResponse")
	proto.RegisterEnum("encoder.CreateStreamRequest_Exposure", CreateStreamRequest_Exposure_name, CreateStreamRequest_Exposure_value)
	proto.RegisterEnum("encoder.CreateStreamRequest_Entitlement_Action", CreateStreamRequest_Entitlement_Action_name, CreateStreamRequest_Entitlement_Action_value)
}

func init() { proto.RegisterFile("encoder.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 539 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xd1, 0x4e, 0xdb, 0x30,
	0x14, 0x25, 0x2d, 0x34, 0xc9, 0x6d, 0x8b, 0xaa, 0x0b, 0x9a, 0xb2, 0x0e, 0xa4, 0xae, 0x13, 0x52,
	0x1e, 0x50, 0x37, 0xb1, 0xed, 0x03, 0xca, 0x40, 0xac, 0x2a, 0x6b, 0x91, 0xa1, 0x3c, 0xec, 0x25,
	0x4a, 0x93, 0xab, 0xc9, 0x22, 0x24, 0x99, 0xed, 0x54, 0xe3, 0x7b, 0xf6, 0x45, 0xfb, 0x90, 0xfd,
	0xc3, 0x54, 0x3b, 0x2d, 0xed, 0xd4, 0xc1, 0xde, 0x72, 0xcf, 0x3d, 0xe7, 0xf8, 0xf8, 0xda, 0x31,
	0x34, 0x29, 0x8d, 0xb2, 0x98, 0x44, 0x2f, 0x17, 0x99, 0xca, 0xd0, 0x2e, 0xcb, 0xee, 0xef, 0x1d,
	0xd8, 0xfb, 0x24, 0x28, 0x54, 0x74, 0xad, 0x04, 0x85, 0xf7, 0x8c, 0xbe, 0x17, 0x24, 0x15, 0x1e,
	0xc1, 0xee, 0x54, 0x64, 0x77, 0x24, 0x82, 0x30, 0x8e, 0x05, 0x49, 0xe9, 0x59, 0x1d, 0xcb, 0x77,
	0x59, 0xd3, 0xa0, 0x7d, 0x03, 0xe2, 0x6b, 0x68, 0xc4, 0x34, 0xe3, 0x11, 0x05, 0x2a, 0xcb, 0x79,
	0xe4, 0x55, 0x34, 0xa9, 0x6e, 0xb0, 0x9b, 0x39, 0x84, 0xc7, 0x80, 0x25, 0x25, 0x17, 0x7c, 0x16,
	0x2a, 0x0a, 0xee, 0xe8, 0xc1, 0xab, 0x6a, 0x62, 0xcb, 0x74, 0xae, 0x4c, 0x63, 0x48, 0x0f, 0xf8,
	0x0e, 0xf6, 0x05, 0x45, 0x3c, 0xe7, 0x94, 0xaa, 0x20, 0x2f, 0xa6, 0x09, 0x8f, 0x34, 0x7f, 0x5b,
	0xf3, 0x71, 0xd9, 0xbb, 0xd2, 0xad, 0xb9, 0xe2, 0x25, 0x38, 0x85, 0x24, 0x11, 0x14, 0x3c, 0xf6,
	0x76, 0x34, 0xcb, 0x9e, 0xd7, 0x13, 0x1e, 0x63, 0x1f, 0x9c, 0x24, 0x8b, 0x42, 0xc5, 0xb3, 0xd4,
	0xab, 0x75, 0x2c, 0xbf, 0x7e, 0x72, 0xd4, 0x5b, 0xcc, 0x61, 0xc3, 0xa6, 0x7b, 0x97, 0x25, 0x99,
	0x2d, 0x65, 0x73, 0x0b, 0xfa, 0x91, 0x67, 0xb2, 0x10, 0xe4, 0xd9, 0x1d, 0xcb, 0xdf, 0x7d, 0xc6,
	0xe2, 0xbc, 0x24, 0xb3, 0xa5, 0x0c, 0x2f, 0xa1, 0x41, 0xa9, 0xe2, 0x2a, 0xa1, 0x7b, 0x4a, 0x95,
	0xf4, 0x9c, 0x4e, 0xd5, 0xaf, 0x9f, 0xf8, 0x4f, 0xdb, 0x3c, 0x0a, 0xd8, 0x9a, 0xba, 0x7d, 0x06,
	0xce, 0x22, 0x26, 0x1e, 0x80, 0x9b, 0x64, 0xe9, 0x37, 0xae, 0x8a, 0x98, 0xf4, 0xf9, 0x58, 0xec,
	0x11, 0xc0, 0x36, 0x38, 0x49, 0xa8, 0x4c, 0xb3, 0xa2, 0x9b, 0xcb, 0xba, 0xfd, 0xcb, 0x82, 0xfa,
	0xca, 0x1a, 0xf8, 0x0a, 0x5c, 0x49, 0xa9, 0xcc, 0x44, 0xc0, 0x63, 0xed, 0xd4, 0x64, 0x8e, 0x01,
	0x06, 0x31, 0x5e, 0x40, 0x2d, 0x8c, 0xf4, 0x10, 0x2b, 0x7a, 0x02, 0x6f, 0xff, 0x37, 0x7a, 0xaf,
	0xaf, 0x65, 0xac, 0x94, 0x23, 0xc2, 0xf6, 0x94, 0xa7, 0xd2, 0xab, 0x76, 0xaa, 0xbe, 0xc5, 0xf4,
	0xf7, 0x3c, 0x25, 0x4f, 0x15, 0x89, 0x59, 0x98, 0xe8, 0x43, 0x6e, 0xb2, 0x65, 0xdd, 0x3d, 0x86,
	0x9a, 0x71, 0x40, 0x17, 0x76, 0xae, 0x3f, 0xf7, 0xd9, 0x79, 0x6b, 0x0b, 0x6d, 0xa8, 0x9e, 0x0e,
	0x46, 0x2d, 0x0b, 0x77, 0x01, 0xbe, 0x8c, 0x6f, 0x07, 0xa3, 0x8b, 0xa0, 0x7f, 0x7b, 0xd1, 0xaa,
	0x74, 0xdf, 0x80, 0xb3, 0x98, 0x3e, 0x02, 0xd4, 0x06, 0xa3, 0xb3, 0xf1, 0x98, 0xb5, 0xb6, 0xb0,
	0x0e, 0xf6, 0x78, 0x72, 0xa3, 0x0b, 0xab, 0xfb, 0x11, 0xf6, 0xd7, 0x43, 0xcb, 0x3c, 0x4b, 0x25,
	0xe1, 0x21, 0x80, 0xd4, 0x88, 0xbe, 0x47, 0xe6, 0xae, 0xbb, 0x06, 0x99, 0xf0, 0xb8, 0xfb, 0x01,
	0xf6, 0xce, 0x28, 0xa1, 0xbf, 0xff, 0x92, 0x67, 0x54, 0x2f, 0x60, 0x7f, 0x5d, 0x65, 0x16, 0x3b,
	0xf9, 0x69, 0x81, 0x7d, 0x6e, 0x46, 0x88, 0x43, 0x68, 0xac, 0x06, 0xc2, 0x83, 0xa7, 0x86, 0xdb,
	0x3e, 0xfc, 0x47, 0xb7, 0xdc, 0xc5, 0x10, 0x1a, 0xab, 0x0b, 0xae, 0x98, 0x6d, 0x48, 0xbf, 0x62,
	0xb6, 0x29, 0xe5, 0xa9, 0xfb, 0x75, 0xf1, 0x4a, 0x4c, 0x6b, 0xfa, 0xd5, 0x78, 0xff, 0x27, 0x00,
	0x00, 0xff, 0xff, 0xaf, 0xb3, 0xe9, 0x8a, 0x46, 0x04, 0x00, 0x00,
}
