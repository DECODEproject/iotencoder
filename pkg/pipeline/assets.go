// Code generated by go-bindata. DO NOT EDIT.
// sources:
// json/sensors.json
package pipeline

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sensorsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\xdd\x6e\xdc\x4a\x72\xbe\xf7\x53\x14\x1c\x2c\xd6\x46\x54\x3a\xfd\x4b\x76\xcf\x9d\x2c\x1d\xc7\x07\x7b\x64\x0b\x96\xd6\x1b\x24\x08\x16\xfd\xab\x69\x98\x43\xce\xe1\x8f\x64\x27\xd8\x17\xc9\x55\x9e\x23\x97\x79\x94\x3c\x49\xd0\x9c\x91\x2c\xcd\xdf\xe1\x71\x8c\x5d\x63\xa1\x3b\x0d\x59\x4d\xb2\xab\xbe\xaa\xef\xab\x22\xf5\xaf\xcf\x00\xfe\xe3\x19\x00\xc0\xf3\xe4\x9f\xcf\x80\x1f\xad\x7e\x0c\xc3\xf8\xf3\xb9\x71\x4c\x09\x6b\x38\x06\x16\x1d\x8a\x52\x4b\xb4\xcc\x52\x94\x9c\x58\xce\x8c\xb6\x44\xda\xe7\xeb\x35\x4b\xd3\x86\xba\xff\xf3\xb8\xb0\x1e\xaa\x6a\x7d\xb8\x36\x8b\x90\x2f\x75\xf6\xe6\x8a\xb1\x3b\x5b\x1f\x3a\xd7\xa6\x65\x9f\x9a\x3a\x9f\x3b\x01\x9f\xae\x53\x6f\x2a\xe8\xc3\x62\x19\x5a\xd3\x0f\x6d\x00\x53\x7b\x98\x0f\x8b\xe4\x53\xff\x19\xba\x50\x77\x4d\x7b\x0c\x3f\xf5\x30\x74\xa1\x03\x03\xce\x2c\x8d\x4b\x7d\xba\x09\x9b\x56\xe3\x4a\x03\xfd\x3c\xb4\x8b\xd4\xf5\x4d\x0b\x7d\x03\x8b\x60\xba\x7c\xd5\x7e\x1e\xa0\x1b\xda\xb6\x19\x6a\x9f\xea\x6b\x30\xa9\x3d\x1a\x17\x74\xcb\xd4\x77\xd0\x0c\x3d\x98\xfb\xc7\xe9\xd2\x75\x6d\x2a\x68\xea\x71\x99\x37\xbd\x81\x65\xaa\xe1\x45\xdd\x80\xa9\x4d\xd5\x5c\x43\xaa\x97\x43\x9f\x0f\x76\x50\x87\xe0\x83\x7f\x79\xb7\xc7\xa1\x4e\xfd\x63\x57\xb8\x36\x98\x3e\xf8\x3f\x9b\x7c\xfc\x39\x23\x54\x22\x61\x48\xd8\x15\x55\x33\x2a\x66\x54\xfe\xcb\xfd\xda\xa5\x9f\x68\xb9\xde\xd6\x22\xd4\x77\x37\x7b\x06\xf0\x97\xa3\x8d\xb8\x32\xb2\x11\x58\x61\x58\xd0\x4e\x11\x2c\x85\x72\x28\x84\xe1\x68\x05\x21\xa8\x14\x13\x51\x12\x4f\xb5\xf3\x13\x03\x7b\x9e\x4e\x2f\x85\xa4\x62\x4f\x6c\xff\xc9\x74\x70\x39\x86\xe5\xeb\x1c\xc3\xe9\x4c\x92\x49\x8e\x79\x6c\x39\xcd\x31\x54\x6f\x38\x46\x7b\x22\xb8\x92\x01\x95\x95\x25\x0a\xee\x1d\x6a\xa7\x33\xe2\x4b\x47\x0b\x21\x9d\x2e\xc2\x44\xc7\xbc\xb9\xb8\x50\x4c\xfd\x48\x38\x85\x17\x97\x6f\xae\x18\x7d\xb9\xc7\x45\x67\x6b\xb4\x5d\x6d\x80\xff\x7d\xa8\xcc\x88\xef\x37\x77\xf8\xde\xe9\xc8\xe7\xcf\x27\xb8\x91\x95\x33\x76\xd8\x8d\x12\x99\xbc\xca\xe0\x22\x33\x51\xfe\x56\x37\x6e\x16\x0e\xea\xa8\x36\x41\x45\xb4\x5a\x4b\x14\x05\x89\xa8\x4a\xc3\xd1\x68\x4f\x1c\x15\xc4\xd8\xb8\xb3\x70\xdc\xc7\x63\xdb\x89\x7b\x9c\x77\xe7\x9b\x4d\xa7\xfc\x6e\x92\x57\xc4\x8c\x1f\xf6\x4a\x89\x44\x5e\x51\x3d\x93\x62\x26\xc5\x1e\xaf\xac\x3c\x71\x9f\x6b\x47\x77\x3f\xef\x31\xe5\xac\xf5\x5c\x17\x28\xad\xe7\x28\x84\x0d\x68\xbc\x23\x58\xc6\x68\x4d\x59\x2a\x52\xb2\xbb\x64\x7b\xb0\xf3\xf9\xe3\x8d\x6d\xef\xfc\x1e\x1e\xf7\xe5\x2f\xe5\xba\x78\x57\xe8\x9a\x38\x16\x2d\xb3\x68\x86\xba\xcf\xbf\x16\x4d\xea\x46\x6c\xa5\x55\x39\x33\xa9\x85\xf6\xee\x1a\x7d\x33\x1e\xeb\x9b\x0c\xc4\x1d\x6b\xee\x16\x38\x53\xc3\xbc\xa9\xfc\x31\xbc\x6e\x5a\x48\x75\xd7\x9b\xda\x85\x23\x48\xab\xbb\xb5\x5b\xcf\x74\x6b\x3a\x90\xe4\x77\x47\xf9\xf4\x97\xfb\xa6\x0e\x9a\xba\xfa\x0c\x73\x53\x45\xe8\x32\xe4\xb3\xe7\xe1\x36\xf5\xf3\xfb\x7b\x1e\x3f\x1f\x37\xfe\x97\x9d\x80\x63\x1b\x80\x63\x9a\x31\xcf\x48\x40\x6e\x15\x47\xe1\xb5\x42\x55\x6a\x8a\x2e\x3a\x1f\x1d\x65\xd1\x68\xfd\x6d\x00\xf7\x20\x4b\x37\x31\xf7\x3f\xff\x7d\x3a\x11\x75\x84\x4d\x43\x9d\x9c\x91\x7d\xb9\xf8\x18\x75\x74\x0b\x75\x96\x47\x21\x6c\xc1\x91\x18\x5a\xa2\xf0\x4a\xa0\xb5\x91\xa2\x70\xb4\x2c\x0b\x61\xcb\x60\xc2\x36\xea\x72\x70\xfa\xad\x1d\xee\xa0\xec\xc7\x76\x5b\xd0\x9b\x37\xb7\x30\x6f\x7a\x68\x5a\x70\x4d\xe5\x1f\x04\x7e\xe4\xf0\xd4\x8d\x47\x16\x4d\xd7\x83\x6b\x16\x8b\x11\x0c\xeb\xe5\x1e\x6e\x83\xc9\xe4\x0d\x4b\xd3\x9a\x45\xe8\x43\x7b\x0c\x3b\xee\xe7\xc3\x32\xd4\x3e\x64\xa0\xd6\x0f\xa1\x3e\x92\x79\xdf\x86\xfa\xba\x9f\xdf\x65\x41\x37\xd4\x55\xba\x9e\xf7\x30\x4f\x7d\x9f\x69\x3f\x1f\x0c\xa6\xed\xe7\x2b\xf2\x37\xfd\xa2\xe9\x96\xf3\xd0\x26\x07\xae\xa9\x7d\xca\xfb\xec\x8e\xa0\x1b\xdc\x1c\x4c\x07\xae\x6a\x06\x0f\xae\xb9\x09\xed\x23\x5d\x72\x04\xb7\xf3\xe4\xe6\xd0\xb7\x66\x09\xf3\x60\xfa\x43\xa0\x65\x74\x03\xb4\xd2\xd2\x48\x02\x57\xc8\x79\x61\x50\x18\x1b\x51\x6b\xa5\xb1\xd0\x56\xa8\x48\x08\x2b\x42\x9c\xcc\xc2\xae\x6d\xdc\x3c\x2d\xe1\xfd\x5b\xa4\x7b\xc1\xab\x08\x3b\xa6\x14\xec\x0f\xd7\xf0\xa7\xf4\x3a\x6d\x02\xf8\x1f\xa0\x0e\xfd\x6d\xd3\x7e\xec\x0e\xe1\x58\x22\x11\x57\x94\xce\x68\x39\xa3\x6a\x1a\x8e\xcb\x19\x63\x93\x70\xac\xb7\x70\xec\x78\x30\x92\x1b\x85\x8a\x71\x89\xc2\x13\x87\x4a\x84\x80\x25\xd3\xa1\x30\x3e\x48\xa5\xdd\x36\x8e\xeb\xd0\x77\x7b\xc1\x7b\xf5\xa8\x2e\xfe\x29\xe1\xeb\x74\xbf\x71\xb8\x49\x5d\xb2\x55\x00\xfb\x79\x04\xc9\xe5\xe9\x1f\x0e\x16\x22\xb1\x25\x99\x05\xe3\xc2\x45\xf4\xcc\x96\x28\x5c\x34\xa8\xca\x42\xa2\x8e\x42\x94\x65\x60\x3e\xc8\xa9\x31\x7d\xf5\x86\x96\x9c\xbc\xfe\x70\xfa\x2b\xba\xe1\x64\x61\x53\x4e\x83\x9f\x47\x84\xef\xd6\x08\x3f\x0f\x9f\x26\x96\x26\x59\x4c\x0d\x29\x2f\x26\x85\x94\x6f\x85\x54\x12\x63\x88\xe0\x14\x55\x61\x1c\x0a\x2e\x08\xda\x28\x29\x1a\x2f\xb4\x0a\x81\x4b\xc3\xed\x76\x48\xc7\x04\xde\x1b\xd3\x9f\x87\x4f\x3b\x8b\xd0\x22\x67\xf0\x2a\xf7\x53\x07\xdd\xb2\x0d\xc6\xc3\x2a\x8f\xe1\x3a\xdd\x84\x1a\x4c\x1b\xcc\x31\x9c\x40\x1c\xaa\x0a\x16\x4d\x53\x83\xab\x82\x69\xa1\xbe\x5b\x64\xc6\x66\x01\x28\x54\xc3\xa7\xa3\xcc\x79\xc9\x67\x81\x06\x4d\x8c\xc9\x05\xb0\x43\xaa\xc6\x56\xe2\x73\x33\xc0\xd0\x0d\xa6\x1a\x89\xed\x26\x80\x20\x24\xaf\x59\xf7\x23\xb6\x1d\x2f\xe8\xcd\xe7\x91\x45\x6d\x2e\x7f\x23\xb3\x9a\x1a\x18\x21\x2b\xdb\x83\xf5\xa3\xdc\xc0\x5a\x69\x09\x17\x32\x2a\xa4\x5e\x59\x14\xa5\x25\xa8\xbc\x31\x58\x96\x5e\x33\xca\xb9\x57\x71\x27\xe9\xed\xc0\xda\xdb\x77\x0c\x5f\x09\xf6\xfa\x1f\x7f\xba\x7c\xb5\xaf\x4b\xab\x96\x73\x93\x3b\xac\x00\x6f\x53\xdf\x36\xd7\xa1\x86\xb3\xd4\x7c\xca\xde\x18\x89\xfb\xa7\xda\xa7\x9b\xe4\x07\x53\xad\x41\x08\xaf\x1a\xd3\xfa\x4d\x28\x2e\x3e\xec\x45\x62\x31\xe2\xab\xb8\x22\x6a\x46\xd8\x8c\x1c\x28\x2e\x7b\x2d\x0f\x21\xb1\xd8\x42\x22\x73\xa6\xa4\x5a\x18\x8c\xc2\x0a\x14\x56\x4a\xd4\xb4\xb0\xe8\x83\xb5\x4a\x44\xce\xa3\xdd\x21\xcd\xea\x86\xed\xc5\xe1\xbd\x6b\xfc\xda\x35\x23\x28\xfb\xe6\x53\x72\x70\x6d\xee\xd9\xcf\xc0\xb2\xa9\xaa\xa1\x37\x75\x9f\xf5\x58\xd7\x2c\x02\x0c\xad\x35\x2b\x38\x76\xe0\x87\x95\xe6\x0a\x9f\x5c\xe8\xba\xb5\x56\xfb\x65\x48\x99\x1e\xe3\x48\xaa\x8b\x65\x15\xfa\x90\xff\xb0\x43\x97\xef\x9e\x11\x1f\x87\x50\x75\x90\xea\xbe\x6d\xfc\xe0\x42\x07\xf5\xdd\xe3\xa4\x7a\x2d\xf1\x1e\x2f\x48\x75\x1f\xda\xdc\xe3\x3e\x38\x1c\xea\xeb\x54\x87\x0e\x5e\x38\xd3\x76\x47\xd0\xb7\x83\xfb\x98\xb9\x70\x9e\x96\xdd\xf1\xf1\xf1\xcb\x11\xcf\xcb\xe6\x36\xb4\xd0\xf5\x66\x64\xca\x63\xf8\xdf\xff\xfc\x2f\x78\xdb\xf4\x61\x06\x37\xa6\x1a\x72\x87\x3e\xe6\x60\x0c\xf9\x89\x53\x0d\xef\x2f\xe1\xc5\xba\x3d\x6f\x43\x97\x56\xba\x31\x9f\xf8\xf8\x6e\xbe\x78\x99\x39\xd6\x7c\x51\x8f\x0f\x82\x08\xb1\x6d\x16\xe3\x83\xbf\x27\xf7\x57\xf8\xf7\xd0\x36\x0f\x2e\xf3\xf2\x18\xce\x86\x51\xc3\xae\xcf\x67\x07\x18\x5c\x34\x3e\x54\x70\x63\xda\x64\x6c\xaa\x46\x31\x9a\x15\x6a\xd6\x1b\xa1\xf6\x30\x74\x2b\x21\x90\xa3\xb1\xf7\xee\x19\xd8\x6b\xbd\xdc\x99\x45\x80\x8f\xa9\x87\x5c\x42\x52\x7d\xdd\x1d\xca\xd5\x2d\x5a\x90\xc4\x5b\xaf\x14\x5a\xe2\x4a\x14\x44\x0b\x34\xbe\x14\xc8\x6c\x29\x65\x50\x84\x71\xa3\x76\xa5\x2a\xdf\x35\x46\x01\x84\x1d\x2a\xf4\x9b\xeb\x54\x2a\x67\x54\x1c\x24\x03\x8d\xb4\xcc\x3d\xa3\x64\x33\x4a\x9f\x74\xea\xdf\x89\x4e\xdd\xa4\x19\x19\xa2\x67\xbc\x2c\xb0\x28\x73\x6f\x55\x16\x16\x6d\x54\x12\x65\x19\x8c\x97\x51\xe9\x42\x8a\x89\x34\x73\xf1\xee\x1c\x39\x11\xe2\x02\xdf\xef\x81\xed\x8f\x55\x70\x7d\x1b\x7a\x58\x64\x45\xbb\x9c\x37\xf5\x9a\x5d\x42\x7d\x13\xaa\x66\x19\x20\x36\x55\xb5\x2a\x3e\x23\x2d\x2f\xdb\xd0\x8d\xd1\x5c\xe7\xfe\x8b\xba\x49\x5d\xd8\x1c\xc3\x3d\xf7\xaf\x26\x41\xbe\x98\x09\x3a\x0d\xf2\xc5\x8c\xec\x9b\x36\x3d\x86\xbc\xd8\x66\x1d\x25\x68\x49\x75\xc4\x42\xaa\x80\x82\xf8\x88\x86\x0a\x83\xa5\x30\xaa\x30\xde\x51\x41\xc9\x2e\xd6\x49\xdd\x7e\xa0\xfb\x57\xbf\xef\xee\x81\xbd\xe1\x19\x9f\xc6\x3a\x9c\x0b\xae\x0d\xfd\x6d\xb8\x6b\xc4\x6f\x42\x6b\xae\x03\x54\x8d\x33\xd5\x17\xeb\x8c\x9b\x7c\xfa\xfe\xc0\x5d\xfd\x1b\x2f\x7a\x6b\x6e\xc2\x31\xc0\x09\xfc\x32\xa4\xd0\x43\x95\x6c\x6b\xda\x71\xf4\x60\x43\xd5\xdc\x82\x20\xfe\xd5\x51\x96\x42\x2d\xcc\x9b\xa1\x0b\x0f\x04\x94\x24\xfe\xd5\x5a\x0b\xf9\x14\xba\x50\xad\xa8\x25\x5f\x7f\xb4\xcf\xc9\x10\x7a\xd0\xc4\xbf\x3a\x04\x4f\xb9\x01\xcf\xc2\x0a\x5b\x08\xaf\x91\x2b\x41\x51\x88\xc2\xa1\x29\xa3\xc4\x82\x47\xa1\x88\xe6\xcc\xea\xe2\xb7\x94\xd6\xcd\x89\xd2\xb7\x1c\x38\x51\x39\xe3\x13\x4b\x6a\x31\x93\xfa\x69\xe0\xf4\xbd\x0c\x9c\x8a\x0d\xd0\x91\xa0\x9d\x77\xd2\xa2\xe7\x85\x46\x21\x14\x41\x5d\x94\x05\xda\xc8\xa9\x89\x85\x91\xba\x2c\xa7\xd6\xc4\x0f\x67\x78\xa1\x08\xd9\xd7\xb3\xff\x7c\xf6\x1e\x4e\x56\x6f\x1b\x0e\x75\x78\x53\xf1\x27\x0f\xbf\x66\xb8\xc7\x5f\x39\x63\xd3\x54\xf5\x53\x7f\xf7\x8d\xfa\x3b\xba\x39\x1f\x12\xc6\x0a\xc2\x9c\x44\xcd\x74\x16\x8d\xa5\x41\x4b\x2c\xc3\x92\x28\x2d\x19\x89\x65\xf0\x64\x22\xc8\x2e\x9b\xca\xb4\x70\x61\xea\x50\xed\x81\xd9\xe9\xd0\xf5\xcd\x02\x4e\x53\xeb\x86\xd4\x6f\xa2\x6b\x7f\xcf\xf6\x10\x5d\x6a\x46\x0f\x0f\x36\xef\xd1\xa5\xa6\x0e\x36\xd5\x16\xba\x0a\xe5\x62\xc1\x72\xa7\x66\xb3\x60\x24\x84\xa1\x8e\x81\x60\xc9\x0b\x56\x94\x44\x12\x5b\x8a\x6d\x74\x2d\x6f\x60\xf9\x60\xf7\xbb\x87\x42\x97\xa7\x7f\xf8\x7d\x07\xdd\xe8\xab\xd1\x1a\x42\x1d\xda\xeb\xcf\x70\xd3\x54\x7d\xa6\xca\x17\xb7\xb9\xa8\xb8\xa6\xae\x83\xeb\x83\x7f\x79\x30\x9c\x6a\x23\x9c\x5a\x7a\xa9\x8d\x96\xc8\x4b\x4d\x51\x30\xee\xd0\x30\x42\xd1\x52\xed\x38\x2b\xcb\x42\xfa\x9d\x3d\xc0\xdf\x2a\x9c\xac\x98\x89\xc9\x6f\x47\xf8\xbe\x77\x92\x7f\x2f\xe1\x64\x9b\xaf\x1c\x9c\xd7\x96\x29\x59\xa0\x60\x86\xa1\xa0\xb9\xb9\x73\x56\x20\x13\xb2\x60\xb4\x28\x8a\x28\xe9\xf4\xe9\x0b\x9c\xa5\x18\x87\x2e\xf7\xdf\x57\x83\xdd\xd7\xd4\x6d\x1b\x76\xf0\xa2\x0f\x5d\xbf\xa5\x77\x97\xcb\xc5\xa1\x31\x4b\x81\xb4\x58\x97\xf9\x5f\x19\xb3\xec\xb6\x7c\x1a\xb3\x3c\x8d\x59\xbe\x83\x31\x0b\xdb\x9c\xb3\x30\x67\x63\x69\x69\x44\x49\x0a\x82\x22\x5a\x89\xa6\x60\x0c\x0b\x5f\x50\x1e\xa5\xa1\xae\xe0\x53\x6b\xec\xaa\x1d\x39\x71\x7d\xba\xd9\xdf\x0e\x9c\x9a\x45\x68\x0d\x9c\x8f\x9b\xc9\x3b\xdd\x58\xb6\x92\x98\xa7\xcd\x62\x39\xf4\xa1\x85\x0f\x29\x67\xee\x66\xb2\x66\x04\xc0\x0f\xb0\x48\xf5\xaf\xe4\xac\xca\x99\xc8\xca\x19\x3b\x30\xa4\xdf\x6b\x79\x70\x2e\x43\xb6\x93\x56\x87\xe0\x48\x20\x28\x4a\x21\x50\x14\x4e\xa2\x92\xde\x21\x8f\x9a\x6a\x1f\x0d\x33\x6e\x87\x8a\x5b\x37\x71\xe6\xb1\xd7\x76\xf9\xad\x72\x43\x35\x8a\x70\x6b\xba\xe0\xa1\xa9\xe1\xdd\x32\xd4\x70\xfa\x01\x5c\xee\x06\x9a\xa1\xed\x8e\xe1\xc5\xeb\x15\x92\x83\x69\xdd\x1c\x96\x43\xbb\x6c\xba\x30\x4a\xf9\x97\x87\x60\xb1\xd9\x23\x72\x1e\x74\xf0\xb4\x44\xce\x48\x44\x11\xb4\x47\x5b\x46\x8e\x5c\x52\x1e\x95\x62\xa5\xb4\x53\xa9\xf7\xe4\x8f\xff\xbc\x96\xe3\xfb\xbe\x78\x69\x9b\x9b\x70\xa7\xd8\xd7\x83\xf0\x17\x94\xa1\x4d\x7d\x07\x27\x67\xa7\x5b\xa5\xfa\xf0\x40\x7c\x15\xcb\x62\xc6\xd4\x8c\x1e\x60\xe3\xbd\x96\x07\xa3\xbe\x3d\x8e\x13\xda\x28\xad\x95\x42\xc6\x95\x44\x61\x34\x43\x65\x7d\x40\xef\x84\xf2\x81\x09\x62\xcc\x8e\xa8\x9f\x9c\x9d\xe6\x22\x73\xbf\x93\x1d\x83\x38\xef\xb1\xa9\xef\x2a\xc7\xba\x78\xa5\x1a\x5a\x73\x9b\x97\xed\x8f\x25\xdf\xfc\xb6\x44\xb3\xe8\xa3\x8b\x02\x63\x7e\x2e\x61\x2c\x43\x5d\x0a\x89\x8e\x1b\xeb\x98\x10\x56\x96\x3b\xbf\x2d\x61\x6a\xb3\xf1\xba\x38\x13\xec\xed\x25\xb2\x63\x89\xa7\xef\xfe\xf8\xf6\x6a\x1f\xe9\x0e\x0b\x1b\xb2\xda\x6a\xfb\xb4\xc2\x2c\x9c\x9b\x3e\x67\x33\x3b\x96\xab\x39\xd5\x56\x46\x2f\xfb\x1f\x16\xfc\x40\x58\x29\x45\xa6\xaf\x88\x9e\x09\x32\x23\xfa\x50\x58\xf7\x58\x1e\x0c\xeb\xf6\xc8\xc9\xa9\xe0\xbc\x11\x05\x3a\xc1\x09\x0a\x67\x1d\x6a\xe3\x05\xca\x60\x94\x21\xa5\x93\x8a\xed\x18\x39\x5d\x9c\xe7\x2d\xee\x8d\xe9\xc5\x79\x66\xa6\xda\x77\x23\x57\x2e\x1f\xf8\x67\x31\xfa\x67\xb6\x6a\xf1\x43\xbb\x18\x0d\x0c\x2c\xd2\xa7\x7e\xdd\xbb\x75\x4d\x95\xfc\x7a\x4d\x95\x79\xac\xf6\x50\xa5\x5f\x86\xe4\xc1\xb7\x4d\x26\xdd\x7c\xd5\xdc\x97\x7d\x99\x1e\x1c\xc3\x65\x26\xf0\xfb\x45\x5f\xe6\x9e\x7e\xe8\xfa\x23\xf0\xa9\xed\x8f\xa0\x6b\x9a\xfe\x08\x9a\x16\xba\x45\xf3\x31\x1c\x8d\x0c\x59\x99\xf6\x3a\xe4\x63\xde\xb4\x1f\x21\xd4\xcd\x70\x3d\xcf\x44\x66\x03\x74\x21\xd4\xab\x22\x9d\xef\x52\x9b\x8f\xc1\x43\xf8\x7c\x70\x18\xc0\x36\xbf\x1a\x73\x8a\x31\x61\x64\x89\x2e\x53\x8f\x28\xbd\x46\xe5\x75\x44\x65\x4b\x4e\x98\x28\x95\xd6\x53\x59\xe7\xfc\xc7\xf3\x4b\x38\x4f\x6e\x0f\x16\xc7\xd3\xdf\x7c\x34\xba\xff\x75\xc0\x88\x3f\x2a\xaf\x18\x99\x49\x32\x63\xfc\x57\x90\xba\xcb\xf2\x69\x36\xfa\xd7\x9b\x8d\xb2\xcd\x39\x95\x8a\xc2\x2a\xce\x1c\x46\x5d\x72\x14\x46\x39\x34\xd6\x0b\x2c\x43\x61\x63\x41\xad\x71\x6a\xe7\x70\x74\xef\x2b\x62\xfe\x7d\xbd\x22\x3e\x30\x6e\xd8\x6b\xf9\xd4\xbb\x3c\xf5\x2e\xdf\x43\xef\xb2\x39\x1f\x52\x32\x72\xc3\xb4\x47\x32\x0a\x6e\x2e\x14\x1a\x15\x02\x4a\xed\x84\xe7\x84\x5b\xc9\xa6\xe6\xea\xc5\xc5\x19\x66\x6d\xb3\x27\x4f\x2f\xe7\xa9\xfe\x1c\x12\xbc\x5b\xf6\x29\xd7\xb7\xd3\x2c\xb8\xb3\xc4\x39\xdf\x33\x5c\x9e\x9c\x90\xec\xa0\x96\xd9\x63\x79\x50\xcb\x6c\xbf\xde\xa0\xc4\x91\x22\x9a\xb1\xa9\x53\x28\x0a\x19\x50\x47\x52\xa0\x2d\x9c\x70\x2e\x32\x41\xc9\x4e\x2d\xf3\xa4\x63\x36\xa5\xf5\xe6\x48\xcb\xd2\xc8\x83\x17\x0e\xb5\xe2\x06\x85\x8e\x1a\xb5\x88\x12\x4d\x8c\x45\xc9\xbd\x31\x2a\x9a\x9d\xd2\xba\x38\xc0\x15\x78\xfa\xee\xed\x57\xf0\xc5\xb2\xe9\x7a\x58\xb6\x4d\x2e\x6e\xc1\x83\x6b\x6a\x17\x72\xce\xf6\x3b\xfa\xe7\xe1\x7a\xa2\xda\xe6\xf2\xe1\x87\x0a\x87\xd4\xf6\x63\xcb\x27\xca\x78\xa2\x8c\xef\x80\x32\xf8\xe6\x5c\xc3\x47\x57\x78\x2f\x24\x0a\x17\x25\x0a\x6f\x39\x2a\xcb\x29\x12\xc9\xb4\x10\x51\x84\xa8\x77\x7e\x9a\xb1\xb7\x17\xa6\xe4\x2b\x5b\x61\x4a\xfe\xdf\x9d\x30\x9b\xdc\x09\xb3\xc9\x9d\xf0\xf6\xcb\x49\x4e\x82\xb4\x05\x15\x68\x6c\x19\x50\x14\xd6\xa1\x2d\x62\x89\xd1\x68\xc3\x89\x66\x85\x0b\x7a\x67\x27\xfc\xb0\xef\x78\x22\x90\x15\x1e\x37\xc7\xaf\x42\x33\xcf\x0a\x46\x90\x52\x25\x50\x38\x4b\xd0\x08\x5d\x20\x11\xc2\x97\xa5\xf3\xb1\xb0\xf2\x2b\x66\x33\xfb\xf8\xe3\xf4\x21\x29\xfc\xb6\x01\xcd\x64\xca\x10\x74\x32\x2c\xe9\xd3\x80\xe6\x3b\xc1\xe5\xe6\xff\x3b\x2a\xaa\x5c\xe1\x64\x81\x5a\x8f\x8c\x5c\x2a\x54\x31\x30\xa4\xb2\x10\xc6\x2b\x52\x44\xba\xf3\xdf\xfa\x0e\x0b\x9b\xf3\x93\x9f\xbe\x46\xd9\x2c\x4c\xaa\x21\x8c\xdf\xb9\x35\x7e\xeb\xe3\xcc\x83\x52\xfb\x8b\x3c\xe1\x93\x85\x0c\x7f\x12\x32\x4f\x42\xe6\x6f\x2c\x64\x9e\xfd\xdb\xb3\xff\x0b\x00\x00\xff\xff\x65\x76\xd7\xce\x6c\x3e\x00\x00")

func sensorsJsonBytes() ([]byte, error) {
	return bindataRead(
		_sensorsJson,
		"sensors.json",
	)
}

func sensorsJson() (*asset, error) {
	bytes, err := sensorsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sensors.json", size: 15980, mode: os.FileMode(420), modTime: time.Unix(1530032124, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sensors.json": sensorsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"sensors.json": &bintree{sensorsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

