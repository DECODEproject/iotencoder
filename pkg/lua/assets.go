// Code generated by go-bindata. DO NOT EDIT.
// sources:
// scripts/encrypt.lua
package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _encryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\x01\x0f\x4d\xc1\x16\x14\x57\xb0\xd0\xc3\x82\x7a\x11\x44\x5c\x2f\x1e\xb3\xed\xd0\x66\xdd\x26\x35\x33\x55\x76\x9f\x5e\x26\xd9\x96\x5d\x8f\xf3\xe5\xff\xfe\x4c\x52\x14\xf0\x6c\xf7\x58\x01\xba\x26\x1c\x46\x2e\xf7\x93\x51\x45\x01\x9b\x26\xd8\x91\xe1\xcd\x04\x33\x50\x25\x04\x1e\xd7\x1f\x6b\x30\xae\x85\x97\xa7\xcf\x0d\xf4\x86\x80\x3d\x6c\x11\x46\x43\x84\xad\x0c\xdc\x5b\x02\x8a\x66\x34\xb8\x0f\x7e\xea\x7a\x38\xa2\x0b\xde\x0f\xc2\xde\x91\xa7\xe0\x4e\x8d\xaf\x9e\x7b\xeb\x3a\xd8\x4d\xc4\x30\x06\xeb\x58\x5a\x88\x5b\x3f\xf1\xbc\x10\xb6\xf1\x62\xe5\x1b\x46\x86\x1a\x02\x7e\x4f\x36\x20\x64\x11\x64\x0a\x9b\xb6\x3f\xc7\x32\x67\x6a\x47\xde\x9d\x53\x99\x33\xa5\x06\xea\xa0\x86\x68\x96\x0e\x7f\xf5\x95\x54\xe7\x82\x2b\xe2\x60\x5d\xa7\x13\x50\x5f\x78\x20\xa8\x41\xb4\xb2\xc5\xc6\xb7\xa8\xe5\xd5\xb9\x1c\x48\x0e\x6a\x90\x8b\x62\x49\x86\xcd\xed\x6a\x75\xf3\x90\xe5\x4a\x8d\xd3\x76\x6f\x9b\x8b\x3b\xf2\x13\xac\xb6\x86\xf0\xfe\x4e\x4b\x75\x99\x90\x08\xc1\xfe\x18\xc6\xff\x46\xa2\x97\x4a\x62\xcb\x0a\x55\xea\xd0\x73\xd5\x82\x53\x4e\x2f\x79\x45\x48\xf2\x98\x39\x20\xa3\xf5\x6e\x11\x8f\xe9\x57\xe6\xe3\xd3\xbf\x6b\x89\x5d\xc3\x40\x5d\x3e\xaf\x11\xf7\x72\xac\x45\xc8\xff\x02\x00\x00\xff\xff\x2f\x61\x73\x59\x39\x02\x00\x00")

func encryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_encryptLua,
		"encrypt.lua",
	)
}

func encryptLua() (*asset, error) {
	bytes, err := encryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "encrypt.lua", size: 569, mode: os.FileMode(420), modTime: time.Unix(1542206352, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"encrypt.lua": encryptLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"encrypt.lua": &bintree{encryptLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

