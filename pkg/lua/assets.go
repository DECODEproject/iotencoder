// Code generated by go-bindata. DO NOT EDIT.
// sources:
// scripts/encrypt.lua
package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _encryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\x01\x0f\x4d\xc1\x16\x14\x57\xb0\xd0\xc3\x82\x7a\x11\x44\x5c\x2f\x1e\xb3\xed\xd0\x66\xdd\x26\x35\x33\x51\x76\x9f\x5e\xa6\xd9\x96\x5d\x8f\xf3\xe5\xff\xfe\x4c\x52\x14\xf0\x6c\xf7\x58\x01\xba\x26\x1c\x46\x2e\xf7\xd1\xa8\xa2\x80\x4d\x13\xec\xc8\xf0\x66\x82\x19\xa8\x12\x02\x8f\xeb\x8f\x35\x18\xd7\xc2\xcb\xd3\xe7\x06\x7a\x43\xc0\x1e\xb6\x08\xa3\x21\xc2\x56\x06\xee\x2d\x01\x25\x73\x52\xb8\x0f\x3e\x76\x3d\x1c\xd1\x05\xef\x07\x61\xef\xc8\x31\x38\xaa\x52\xe0\xd5\x73\x6f\x5d\x07\xbb\x48\x0c\x63\xb0\x8e\xa5\x87\xb8\xf5\x91\xe7\x95\xb0\x4d\x57\x2b\xdf\x30\x32\xd4\x10\xf0\x3b\xda\x80\x90\x4d\x20\x53\xd8\xb4\xfd\x39\x96\x39\x53\x3b\xf2\xee\x9c\xca\x9c\x29\x35\x50\x07\x35\x4c\x66\xe9\xf0\x57\x5f\x49\x77\x2e\xb8\x22\x0e\xd6\x75\x3a\x01\xf5\x85\x07\x82\x1a\x44\x2b\x5b\x6c\x7c\x8b\x5a\x1e\x9e\xcb\x81\xe4\xa0\x06\xb9\x68\x2a\xc9\xb0\xb9\x5d\xad\x6e\x1e\xb2\x5c\xa9\x31\x6e\xf7\xb6\xb9\xb8\x23\x3f\xc1\x6a\x6b\x08\xef\xef\xb4\x54\x97\x09\x89\x10\xec\x8f\x61\xfc\x6f\x24\x7a\xa9\x24\xb6\xac\x50\xa5\x0e\x3d\x57\x2d\x38\xe5\xf4\x92\x57\x84\x24\x8f\x99\x03\x32\x5a\xef\x16\xf1\x98\x7e\x65\x3e\x3e\x7d\xbc\x96\xd8\x35\x0c\xd4\xe5\xf3\x1a\xd3\x5e\x8e\xb5\x08\xf9\x5f\x00\x00\x00\xff\xff\xfc\x52\x1c\xf9\x3c\x02\x00\x00")

func encryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_encryptLua,
		"encrypt.lua",
	)
}

func encryptLua() (*asset, error) {
	bytes, err := encryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "encrypt.lua", size: 572, mode: os.FileMode(436), modTime: time.Unix(1528966100, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"encrypt.lua": encryptLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"encrypt.lua": &bintree{encryptLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

