// Code generated by go-bindata. DO NOT EDIT.
// sources:
// scripts/decrypt.lua (733B)
// scripts/encrypt.lua (981B)

package lua

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _decryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x8f\x9b\x30\x14\xbc\xfb\x57\xbc\xa3\x2d\x81\x4f\x55\x0f\x91\x72\x88\x02\x6a\xda\x2a\x4d\x55\x72\xe9\x09\x39\xf6\x6b\xe2\x12\x6c\x64\x1b\x76\xd9\xd5\xfe\xf7\x95\x81\x28\x1f\x62\xf7\x68\xcd\xbc\xf1\xbc\x99\x97\xa6\x90\xa1\x74\x7d\x13\xb4\x35\xe0\xa5\xd3\x4d\x80\x7f\xd6\x41\x96\xaf\x77\x59\x0e\xdf\xed\x1e\x7e\xeb\xb3\x0d\x84\xa4\x29\x28\x11\x04\x78\x79\xc2\x5a\x78\x52\x61\xef\xcb\xf1\x01\x4b\x28\xd6\x9b\x7c\xbb\xe2\x7f\x50\x5a\xa7\xe0\x95\x00\x48\x5b\xd7\xad\xd1\xa1\x2f\x3d\xca\x0a\xfb\x2b\xa9\x08\x4e\x9b\x23\x79\x23\x24\x0a\x7e\xa6\x71\x42\xa1\xd0\x01\x3c\xce\x26\x04\x00\x8d\xb4\x4a\x9b\xe3\x1c\x16\xf0\x39\x00\xcc\xcf\xc9\xd6\x75\xf8\x01\xf6\x82\xc6\x59\x5b\xcf\xcf\x9d\x50\x56\xbe\xad\xe7\x30\xdd\x01\xcc\xfd\x17\x77\x4c\x53\x70\x28\x14\x08\xa3\xa0\x13\x67\xad\x44\xc0\x21\xc9\x21\x41\x58\x0e\x68\xf9\xdf\x5b\x43\x7f\xe6\x7f\x8b\x04\x6e\x82\x65\x43\x42\x77\x9c\x6c\xb5\x5f\x25\x70\x13\x1c\x23\x64\x8a\x69\x09\xdb\xe2\x1b\x6f\x4d\x23\x64\x45\x0f\xc2\xe3\xd7\x2f\x34\x12\xf9\x88\xb3\x85\x0f\x8e\x32\x46\xc8\xb5\x9a\xb1\x97\x7c\x9d\x6d\xb8\xc1\x27\xca\xee\xa1\x45\xe3\x74\x27\x02\x5e\xc4\xa2\x33\xfe\xd8\x6b\x14\x6c\x44\x7f\xb6\x42\x25\x20\xab\x8b\x9c\x1a\xcf\x8a\xde\x5d\x42\x85\x7d\x8c\x6b\x92\x1b\x6d\x71\x85\x9d\x96\x58\x36\xed\x21\xaa\x45\xbc\x16\xcd\x60\x3c\x99\x98\x8c\xc4\x3f\x9c\x36\x81\xfe\x28\x76\xbf\xf8\x50\x3d\xd2\x9b\x6d\x27\x03\x3c\x16\x3f\xad\xc9\xd8\x7b\x00\x00\x00\xff\xff\xa3\xcd\xaf\x59\xdd\x02\x00\x00")

func decryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_decryptLua,
		"decrypt.lua",
	)
}

func decryptLua() (*asset, error) {
	bytes, err := decryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "decrypt.lua", size: 733, mode: os.FileMode(420), modTime: time.Unix(1542286665, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0xec, 0x1b, 0x6, 0xf6, 0x83, 0xe1, 0xdb, 0xed, 0xe6, 0xbf, 0x4b, 0xda, 0x7c, 0x75, 0x45, 0x73, 0xda, 0x21, 0x7, 0xac, 0x54, 0x68, 0xd2, 0x58, 0x98, 0xcd, 0x85, 0x6a, 0xe2, 0x68, 0x2b}}
	return a, nil
}

var _encryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x51\x6b\xdb\x30\x10\x7e\xd7\xaf\xf8\xde\x62\x83\x13\xd8\x58\x07\x2b\xe4\x21\x34\x66\xed\x46\xdb\xd1\x94\xc1\x18\x23\x28\xd2\x2d\xbe\xc6\x96\x84\x2c\x27\x78\xa5\xff\x7d\xc8\x56\x9a\x2e\x2f\xcb\x4b\xac\xbb\xfb\xee\xbe\xef\x3e\x69\x3a\x45\x69\x94\xef\x5d\x60\x6b\xd0\x2a\xcf\x2e\xe0\xb7\xf5\x58\x96\x57\xf7\xcb\x12\x37\xf6\x11\xdf\xb8\xb6\x41\xa8\xce\xef\x09\x73\x4c\x48\xbf\xbf\xb8\x78\xf7\x69\x22\xc4\x74\x0a\x2d\x83\x44\xab\x2a\x6a\x24\x82\xc5\x5e\xd6\xac\x65\x20\xb0\x71\x5d\x10\x3b\xea\xdb\x75\xca\xce\xb1\xba\xba\x2e\x6f\x17\xb3\x07\x52\xd6\x6b\x3c\x0b\x40\xd3\x9e\x15\xad\x83\xdd\x91\x41\xfc\xbd\x16\xad\x82\x67\xb3\x2d\x04\xa0\x6c\xd3\x74\x86\x43\xbf\x66\xfd\xff\x1a\xd7\x6d\x76\xd4\x9f\xd7\x88\x97\x81\x2c\x37\xce\xfa\x00\x69\xf4\x89\xe8\xd7\xf2\xc7\x6a\x50\x31\x90\xc5\x1c\x9e\xa4\x5e\x3f\xb5\xd6\x64\x31\x55\xe0\x8d\x86\x7c\xe8\xb2\x25\x43\x3e\x42\x25\x0c\x1d\x92\x86\x58\xe6\x24\x7b\xd0\x9e\x7c\x8f\xc0\x0d\x89\xa4\x6e\xe4\x53\x5e\x2d\xaf\x67\x3b\xea\xb7\x64\xb2\x61\x95\x63\xb3\x38\x0d\xa1\x22\x38\xd9\xd7\x56\x6a\x1c\x08\x07\xae\x6b\xd0\xe8\x8a\x38\xc6\xdf\x12\x5b\x2e\x1e\x17\x23\xfc\xb1\xa2\x44\x60\xd2\xc2\x75\x9b\x9a\x55\x64\x52\xfc\xbb\xb5\x28\x38\xce\x18\x2d\x0c\xbd\x23\x48\x4f\x08\x5e\x9a\x86\x43\x20\x0d\x36\xb1\x9b\xaa\x49\x7a\xb0\x69\x59\xd3\x00\xa8\x48\x6a\xf2\x05\x0e\x15\xab\x0a\xdc\x42\x76\xa1\x22\x13\x58\xc9\x88\x5a\x94\x8b\xa5\x18\x6b\x30\xc7\xf3\x4b\xfa\xfe\x39\x49\xca\x47\x33\x26\xbf\x30\xc7\x69\x17\x97\x23\xcd\x2c\xbf\xdc\xc8\x96\x3e\x7e\xc8\xf2\x57\xd8\x5b\xd2\x03\x2a\xee\xfe\x3c\x3c\xe8\x4e\xdb\x19\x48\x46\xf3\x8a\x41\xe3\xa6\xe3\x5a\xc3\x76\x1e\xb6\x0b\xae\x0b\xb0\x9b\x27\x52\x41\xa4\x53\x32\x21\x61\xb3\xd3\xfd\x8b\x1b\x13\x40\xe2\x13\x87\xce\xce\x6f\x54\x1e\x0b\x6e\x57\x9f\x67\x4e\xaa\x5d\x96\x4c\xc9\x8b\x53\x68\xd4\x90\x8b\x5c\x9c\xc6\x35\xd2\x65\xe3\xa1\x48\xcd\xf3\x94\x9c\xfd\x21\xe3\xad\x6d\x30\xc7\xf7\xf2\x61\x75\x73\x7f\x77\x4c\x90\x51\x56\xb3\xd9\xc6\x97\x36\x62\x26\xc7\xd4\xf1\x05\x0e\xff\x42\x38\xcf\x26\x64\x5f\x56\xf7\x77\x23\x88\xd2\xac\x3c\xff\x1b\x00\x00\xff\xff\x7e\xc5\xdd\x29\xd5\x03\x00\x00")

func encryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_encryptLua,
		"encrypt.lua",
	)
}

func encryptLua() (*asset, error) {
	bytes, err := encryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "encrypt.lua", size: 981, mode: os.FileMode(420), modTime: time.Unix(1542287204, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x98, 0x24, 0x47, 0x9b, 0xec, 0xa1, 0x8b, 0xea, 0x44, 0x51, 0xf6, 0xe4, 0x33, 0x3d, 0xfb, 0x51, 0xce, 0x9, 0x64, 0x71, 0x4f, 0x6a, 0x95, 0x1f, 0x7e, 0x61, 0xef, 0x15, 0x24, 0x47, 0xf}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"decrypt.lua": decryptLua,

	"encrypt.lua": encryptLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"decrypt.lua": &bintree{decryptLua, map[string]*bintree{}},
	"encrypt.lua": &bintree{encryptLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
