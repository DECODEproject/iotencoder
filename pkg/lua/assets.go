// Code generated by go-bindata. DO NOT EDIT.
// sources:
// scripts/decrypt.lua (852B)
// scripts/encrypt.lua (1.148kB)

package lua

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _decryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6f\xd4\x30\x10\x85\xef\xfe\x15\xef\xd6\x58\x4a\x22\x81\x28\x12\x95\x72\x58\x6d\x22\x0a\xa8\x14\x91\x5e\x38\xad\x5c\x7b\xe8\x9a\x6d\xec\xc8\x76\x02\x4b\xd5\xff\x8e\x9c\xb8\x6d\xb6\x8a\xb8\xc5\x7e\xf3\x26\xf3\x3e\x4f\x51\xa0\x26\xe9\x8e\x7d\xd0\xd6\xc0\x4b\xa7\xfb\x80\x9f\xd6\xa1\x6e\xb6\xd7\x75\x83\x4f\xf6\x06\xdf\xf4\xbd\x0d\x8c\x15\x05\xe4\xe0\x46\xc2\xe0\x49\xb1\xf9\xb3\xc2\x19\xa9\xb7\xe7\xe7\x6f\x3e\x9c\x4d\x05\x4a\x04\x01\x2f\xf7\xd4\x09\xcf\x0e\x74\xf4\xbb\xf9\x80\x0a\xed\xf6\xb2\xb9\xda\x94\xdf\x49\x5a\xa7\xf0\xc0\x00\x69\xbb\x6e\x30\x3a\x1c\x77\x9e\xe4\x81\x8e\x2f\x45\x6d\x70\xda\xdc\xb1\x47\xc6\x62\xc3\xff\xf5\xd8\x93\x50\xe4\x80\xd7\xde\x9c\x01\x64\xa4\x55\xda\xdc\xad\x69\x81\xfe\x04\x60\xdd\x37\x47\x5b\xd7\xfe\x92\x71\xd6\x76\xeb\xbe\x3d\xc9\x83\x1f\xba\xb5\x1c\x45\x01\x47\x42\x41\x18\x85\x51\xdc\x6b\x25\x02\x4d\xb4\x26\x4a\xa8\x26\x75\xf7\xcb\x5b\x93\x7d\x69\x7e\xb4\x39\x16\xf0\xf8\x44\xe1\xa4\xa6\xde\xdc\x6c\x72\x2c\xe0\x70\xc6\x12\x8a\x0a\x57\xed\xc7\x72\x30\xbd\x90\x87\xec\x56\x78\x7a\xff\x2e\x8b\x85\xe5\xac\xf3\x0b\x1f\x5c\xc6\x39\x63\x2f\xf8\x67\xf6\xcd\xb6\xbe\x2c\x0d\xfd\xce\xa6\xfc\xfc\x54\xbf\xe8\x9d\x1e\x45\xa0\xa7\x8e\x71\xbc\xf2\xf5\x03\xc6\xae\x9e\xbc\x8f\xab\x54\xe1\xd4\x9f\xee\x9f\xfc\xf3\x30\xa5\xa2\x51\x4b\xda\xf5\xc3\x6d\xb2\x2b\x92\x56\xc5\xbd\x7a\xc0\x73\x9e\xf4\xf1\x98\xc4\x32\xbe\x5d\x8e\x74\x58\x40\x9f\x02\x88\xc8\x48\xcd\x2b\x9d\xa5\x9f\xe6\x58\x72\x88\x76\xfe\x7c\x95\x06\xd1\x23\x3f\xad\x4a\xb4\x38\x63\xbd\xd3\x26\x64\x9f\xdb\xeb\xaf\xe5\xb4\x51\x94\x2d\x00\x2f\x46\x4a\x60\x39\xff\x17\x00\x00\xff\xff\xad\xfe\xcd\x65\x54\x03\x00\x00")

func decryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_decryptLua,
		"decrypt.lua",
	)
}

func decryptLua() (*asset, error) {
	bytes, err := decryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "decrypt.lua", size: 852, mode: os.FileMode(420), modTime: time.Unix(1556068961, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xd, 0xb9, 0x87, 0x45, 0x3c, 0xaf, 0x90, 0xbb, 0xba, 0xef, 0x10, 0x5c, 0x4a, 0x9b, 0x7a, 0x9a, 0x68, 0x63, 0xce, 0x65, 0x5b, 0xc9, 0xaa, 0x3, 0xa7, 0xf4, 0xf8, 0xc7, 0xfb, 0x56, 0x65}}
	return a, nil
}

var _encryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x6b\xdb\x4a\x10\x7d\xdf\x5f\x31\x6f\x96\x40\x16\xe4\x72\x13\xb8\x01\x3d\x98\x58\x24\xb9\x25\x49\x89\x43\xa1\x84\x62\xd6\xab\xa9\x35\xb1\xb4\x2b\x56\x23\xb9\x6a\xc8\x7f\x2f\xfb\x61\x3b\xc9\x4b\xfd\x62\x7b\x67\xce\x99\x73\xce\x8e\x34\x9f\x43\xa9\x95\x9d\x3a\x26\xa3\xa1\x57\x96\x3a\x86\x9f\xc6\xc2\xb2\xbc\x7a\x58\x96\x70\x6b\x9e\xe0\x2b\x35\x86\x85\x1a\xec\x88\x50\xc0\x0c\xab\x7f\xce\xcf\xcf\xfe\x9b\x09\x31\x9f\x43\x25\x59\x42\xaf\x6a\x6c\x25\xb0\x81\x51\x36\x54\x49\x46\x20\xdd\x0d\x2c\x76\x38\xf5\xeb\x58\x2d\x60\x75\x75\x53\xde\x2d\xf2\x47\x54\xc6\x56\xf0\x2a\x00\x2a\x1c\x49\xe1\x9a\xcd\x0e\x35\xb8\xcf\xb1\x69\xc5\x96\xf4\x36\x13\x00\xca\xb4\xed\xa0\x89\xa7\x35\x55\x7f\xef\xe9\x86\xcd\x0e\xa7\xcf\x3d\xe2\xcd\x8b\xa5\xb6\x33\x96\x41\xea\xea\x24\xf4\x4b\xf9\x7d\xe5\x5d\x78\xb1\x50\x80\x45\x59\xad\x5f\x7a\xa3\x13\x57\xca\xe0\x9d\x87\xd4\xb3\x6c\x51\xa3\x75\x50\x09\x1a\xf7\xd1\x83\x6b\xeb\x24\x59\xc0\x11\xed\x04\x4c\x2d\x8a\xe8\x2e\xe8\x29\xaf\x96\x37\xf9\x0e\xa7\x2d\xea\xc4\x47\x19\xc8\xdc\x34\xe0\x1a\xa1\x93\x53\x63\x64\x05\x7b\x84\x3d\x35\x0d\x60\xb8\x15\x71\x38\x2f\xe0\xf5\xed\xf0\xe7\x79\xe6\x04\xcf\x7e\x40\x01\xcb\xc5\xd3\xc2\x13\x3d\xd5\x18\xa5\xcc\x7a\xe8\x86\x4d\x43\xca\x69\xca\x3e\xe6\xe7\xac\xbb\x69\xe1\x32\x79\xea\x10\xa4\x45\x60\x2b\x75\x4b\xcc\x58\x01\x69\xc7\xa6\x1a\x94\x16\x48\xf7\x54\xa1\x07\xd4\x28\x2b\xb4\x19\xec\x6b\x52\x35\x50\x0f\x72\xe0\x1a\x35\x93\x92\x0e\xb5\x28\x17\x4b\x11\x7a\x82\xd2\xf0\xfb\x79\x16\x33\x08\xd7\xe2\x15\x9f\x52\xb9\x0c\x32\x93\xf4\x72\x23\x7b\xbc\xf8\x37\x49\x8f\xb0\xf7\xa2\x3d\xca\xdd\xc2\xe7\x63\x21\x68\x84\x02\x1e\xef\xaf\x73\x8d\xfb\x24\xbd\x34\x8a\x91\x93\xb3\x8b\x13\x0f\x8d\x1e\x4d\xe3\x69\x84\xb3\x17\xc3\xf5\xce\x5c\x94\x99\x0f\x66\x33\x50\x53\x81\x19\x2c\x98\x81\xbb\x81\xc1\x6c\x5e\x50\xb1\x68\x8c\x92\x0d\xf4\xd8\xf7\xee\x19\xf9\xe0\x20\x1e\x26\x91\xdd\xa9\xcc\x3f\x2f\x63\x9a\x46\x06\x27\x0a\x0a\xe8\xd9\x26\x77\xab\xeb\xbc\x93\x6a\x97\x04\xa1\xc7\x16\x33\xb0\xcb\x0f\x8e\x51\x7a\xcc\x9b\x30\x03\xe7\x8c\xbf\x38\x73\x1d\xb9\xaa\x51\xed\xfa\xa1\x3d\xac\x95\x74\x2b\x1b\x3d\x25\x51\x52\xf6\x71\x4e\xdc\x9c\x34\xcd\x80\xc6\xcc\xd3\xa6\x42\x44\x9f\x05\xb4\xb2\x4b\xcc\xc0\x19\x04\x23\x69\xac\xe4\xbf\x51\x5b\x63\xdc\xa0\x6f\xe5\xe3\xea\xf6\xe1\xfe\x50\x40\xad\x4c\x45\x7a\xeb\x5e\x08\x01\x33\x3b\x94\x0e\x2f\x0a\xff\x2d\x44\x67\x49\x73\xf2\xff\xea\xe1\x3e\x80\x30\x09\x7d\x69\xfa\x27\x00\x00\xff\xff\xd1\x71\xb2\x67\x7c\x04\x00\x00")

func encryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_encryptLua,
		"encrypt.lua",
	)
}

func encryptLua() (*asset, error) {
	bytes, err := encryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "encrypt.lua", size: 1148, mode: os.FileMode(420), modTime: time.Unix(1556075166, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcd, 0x1e, 0x75, 0x9f, 0x4e, 0x64, 0xd1, 0xa, 0x18, 0x39, 0x74, 0xf4, 0xca, 0xe3, 0x10, 0xb2, 0x64, 0x9d, 0xe1, 0xe1, 0x78, 0x13, 0xae, 0xe1, 0x5e, 0x26, 0x7, 0x63, 0x75, 0xae, 0x45, 0xec}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"decrypt.lua": decryptLua,

	"encrypt.lua": encryptLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"decrypt.lua": &bintree{decryptLua, map[string]*bintree{}},
	"encrypt.lua": &bintree{encryptLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
