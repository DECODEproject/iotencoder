// Code generated by go-bindata. DO NOT EDIT.
// sources:
// scripts/decrypt.lua (733B)
// scripts/encrypt.lua (991B)

package lua

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _decryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x52\x4d\x8f\x9b\x30\x14\xbc\xfb\x57\xbc\xa3\x2d\x81\x4f\x55\x0f\x91\x72\x88\x02\x6a\xda\x2a\x4d\x55\x72\xe9\x09\x39\xf6\x6b\xe2\x12\x6c\x64\x1b\x76\xd9\xd5\xfe\xf7\x95\x81\x28\x1f\x62\xf7\x68\xcd\xbc\xf1\xbc\x99\x97\xa6\x90\xa1\x74\x7d\x13\xb4\x35\xe0\xa5\xd3\x4d\x80\x7f\xd6\x41\x96\xaf\x77\x59\x0e\xdf\xed\x1e\x7e\xeb\xb3\x0d\x84\xa4\x29\x28\x11\x04\x78\x79\xc2\x5a\x78\x52\x61\xef\xcb\xf1\x01\x4b\x28\xd6\x9b\x7c\xbb\xe2\x7f\x50\x5a\xa7\xe0\x95\x00\x48\x5b\xd7\xad\xd1\xa1\x2f\x3d\xca\x0a\xfb\x2b\xa9\x08\x4e\x9b\x23\x79\x23\x24\x0a\x7e\xa6\x71\x42\xa1\xd0\x01\x3c\xce\x26\x04\x00\x8d\xb4\x4a\x9b\xe3\x1c\x16\xf0\x39\x00\xcc\xcf\xc9\xd6\x75\xf8\x01\xf6\x82\xc6\x59\x5b\xcf\xcf\x9d\x50\x56\xbe\xad\xe7\x30\xdd\x01\xcc\xfd\x17\x77\x4c\x53\x70\x28\x14\x08\xa3\xa0\x13\x67\xad\x44\xc0\x21\xc9\x21\x41\x58\x0e\x68\xf9\xdf\x5b\x43\x7f\xe6\x7f\x8b\x04\x6e\x82\x65\x43\x42\x77\x9c\x6c\xb5\x5f\x25\x70\x13\x1c\x23\x64\x8a\x69\x09\xdb\xe2\x1b\x6f\x4d\x23\x64\x45\x0f\xc2\xe3\xd7\x2f\x34\x12\xf9\x88\xb3\x85\x0f\x8e\x32\x46\xc8\xb5\x9a\xb1\x97\x7c\x9d\x6d\xb8\xc1\x27\xca\xee\xa1\x45\xe3\x74\x27\x02\x5e\xc4\xa2\x33\xfe\xd8\x6b\x14\x6c\x44\x7f\xb6\x42\x25\x20\xab\x8b\x9c\x1a\xcf\x8a\xde\x5d\x42\x85\x7d\x8c\x6b\x92\x1b\x6d\x71\x85\x9d\x96\x58\x36\xed\x21\xaa\x45\xbc\x16\xcd\x60\x3c\x99\x98\x8c\xc4\x3f\x9c\x36\x81\xfe\x28\x76\xbf\xf8\x50\x3d\xd2\x9b\x6d\x27\x03\x3c\x16\x3f\xad\xc9\xd8\x7b\x00\x00\x00\xff\xff\xa3\xcd\xaf\x59\xdd\x02\x00\x00")

func decryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_decryptLua,
		"decrypt.lua",
	)
}

func decryptLua() (*asset, error) {
	bytes, err := decryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "decrypt.lua", size: 733, mode: os.FileMode(420), modTime: time.Unix(1542929607, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0xec, 0x1b, 0x6, 0xf6, 0x83, 0xe1, 0xdb, 0xed, 0xe6, 0xbf, 0x4b, 0xda, 0x7c, 0x75, 0x45, 0x73, 0xda, 0x21, 0x7, 0xac, 0x54, 0x68, 0xd2, 0x58, 0x98, 0xcd, 0x85, 0x6a, 0xe2, 0x68, 0x2b}}
	return a, nil
}

var _encryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x53\x5d\x6b\xe3\x3a\x10\x7d\xd7\xaf\x38\x6f\xb6\xc1\x09\xdc\xcb\xed\x85\x5b\xc8\x43\x68\xcc\x6d\x77\x69\xbb\x34\x65\x61\x29\x4b\x50\xa4\xd9\x58\x8d\x2d\x09\x59\x4e\xf0\x96\xfe\xf7\x45\x1f\x69\xba\x7d\xd9\xbc\xc4\x9a\x99\x33\x73\xce\x19\x69\x36\x43\xa3\x85\x9b\xac\x57\x46\x63\x10\x4e\x59\x8f\x1f\xc6\x61\xd5\x5c\xdd\xaf\x1a\xdc\x98\x47\x7c\x51\x9d\xf1\x4c\x8c\xee\x40\x58\xa0\x20\xf9\xf7\xc5\xc5\x5f\xff\x15\x8c\xcd\x66\x90\xdc\x73\x0c\xa2\xa5\x9e\xc3\x1b\x1c\x78\xa7\x24\xf7\x04\xa5\xed\xe8\xd9\x9e\xa6\x61\x93\xb3\x0b\xac\xaf\xae\x9b\xdb\xe5\xfc\x81\x84\x71\x12\x2f\x0c\x90\x74\x50\x82\x36\xde\xec\x49\x23\xfc\xde\x8a\xd6\xde\x29\xbd\xab\x19\x20\x4c\xdf\x8f\x5a\xf9\x69\xa3\xe4\x9f\x6b\xec\xb8\xdd\xd3\xf4\xb1\x86\xbd\x46\xb2\xaa\xb7\xc6\x79\x70\x2d\xcf\x44\x3f\x37\xdf\xd6\x51\x45\x24\x8b\x05\x1c\x71\xb9\x79\x1e\x8c\x2e\x43\xaa\xc6\x3b\x0d\x55\xec\xb2\x23\x4d\x2e\x40\x39\x34\x1d\xb3\x86\x50\x66\xb9\x72\xa0\x03\xb9\x09\x5e\xf5\xc4\xb2\xba\xc4\xa7\xb9\x5a\x5d\xcf\xf7\x34\xed\x48\x97\xd1\xca\xd4\x2c\x4c\x83\x6f\x09\x96\x4f\x9d\xe1\x12\x47\xc2\x51\x75\x1d\x28\x6d\x85\x9d\xe2\x0b\xbc\xbc\x9e\x0e\x4f\x45\x20\x5c\x7c\xc7\x02\xab\xe5\xe3\x32\x36\x7a\x6c\x29\x53\x29\x06\xd8\x71\xdb\x29\x11\x38\xd5\xbf\xfb\x17\xa4\x87\x69\x69\x99\x7e\xb2\x04\xee\x08\xde\x71\xdd\x2b\xef\x49\x42\xe9\xd0\x4d\x74\xc4\x1d\x94\x1e\x94\xa4\x08\x68\x89\x4b\x72\x35\x8e\xad\x12\x2d\xd4\x00\x3e\xfa\x96\xb4\x57\x82\x07\xd4\xb2\x59\xae\x58\xaa\x49\x4c\xd3\xf7\x53\x91\x3d\x48\x6b\x89\x8c\xcf\xae\x5c\x26\x9a\x65\x75\xb9\xe5\x03\xfd\xfb\x4f\x59\xbd\xc1\xde\x93\x8e\xa8\xb0\x85\x8f\xe1\xa8\x3b\xfb\x14\x49\x06\x57\xea\xa8\x71\x3b\xaa\x4e\xc2\x8c\x0e\x66\xf4\x76\xf4\x30\xdb\x67\x12\x9e\xe5\x53\x5e\x47\xc6\x96\xe7\x9b\x18\x1c\x63\x40\xe6\x13\x86\xce\x3f\xde\xad\x2a\x14\xdc\xae\xff\x9f\x5b\x2e\xf6\x65\xde\x48\x55\x9f\x43\x49\x43\xc5\x2a\x76\x1e\xd7\x73\x5b\xa6\x43\x9d\x9b\x57\x39\x39\xff\x49\xda\x19\xd3\x63\x81\xaf\xcd\xc3\xfa\xe6\xfe\xee\x94\x20\x2d\x8c\x54\x7a\x17\xde\x5c\xc2\x14\xa7\xd4\xe9\x2d\xc6\x7f\xc6\xac\x53\xda\x97\x9f\xd6\xf7\x77\x09\x44\x79\x56\x55\xfd\x0a\x00\x00\xff\xff\x1d\x42\x06\xfb\xdf\x03\x00\x00")

func encryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_encryptLua,
		"encrypt.lua",
	)
}

func encryptLua() (*asset, error) {
	bytes, err := encryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "encrypt.lua", size: 991, mode: os.FileMode(420), modTime: time.Unix(1542929607, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbe, 0x7c, 0xad, 0x91, 0xc4, 0xd7, 0x44, 0xe5, 0x53, 0xa1, 0x12, 0xd9, 0xbb, 0x40, 0xe1, 0xb9, 0x19, 0xa, 0x92, 0x56, 0xaa, 0x41, 0x4a, 0x12, 0xe8, 0x89, 0x9, 0xab, 0x8b, 0xa5, 0xee, 0x8e}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"decrypt.lua": decryptLua,

	"encrypt.lua": encryptLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"decrypt.lua": &bintree{decryptLua, map[string]*bintree{}},
	"encrypt.lua": &bintree{encryptLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
