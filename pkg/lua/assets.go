// Code generated by go-bindata. DO NOT EDIT.
// sources:
// scripts/decrypt.lua (852B)
// scripts/encrypt.lua (1.195kB)

package lua

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _decryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x41\x6f\xd4\x30\x10\x85\xef\xfe\x15\xef\xd6\x58\x4a\x22\x81\x28\x12\x95\x72\x58\x6d\x22\x0a\xa8\x14\x91\x5e\x38\xad\x5c\x7b\xe8\x9a\x6d\xec\xc8\x76\x02\x4b\xd5\xff\x8e\x9c\xb8\x6d\xb6\x8a\xb8\xc5\x7e\xf3\x26\xf3\x3e\x4f\x51\xa0\x26\xe9\x8e\x7d\xd0\xd6\xc0\x4b\xa7\xfb\x80\x9f\xd6\xa1\x6e\xb6\xd7\x75\x83\x4f\xf6\x06\xdf\xf4\xbd\x0d\x8c\x15\x05\xe4\xe0\x46\xc2\xe0\x49\xb1\xf9\xb3\xc2\x19\xa9\xb7\xe7\xe7\x6f\x3e\x9c\x4d\x05\x4a\x04\x01\x2f\xf7\xd4\x09\xcf\x0e\x74\xf4\xbb\xf9\x80\x0a\xed\xf6\xb2\xb9\xda\x94\xdf\x49\x5a\xa7\xf0\xc0\x00\x69\xbb\x6e\x30\x3a\x1c\x77\x9e\xe4\x81\x8e\x2f\x45\x6d\x70\xda\xdc\xb1\x47\xc6\x62\xc3\xff\xf5\xd8\x93\x50\xe4\x80\xd7\xde\x9c\x01\x64\xa4\x55\xda\xdc\xad\x69\x81\xfe\x04\x60\xdd\x37\x47\x5b\xd7\xfe\x92\x71\xd6\x76\xeb\xbe\x3d\xc9\x83\x1f\xba\xb5\x1c\x45\x01\x47\x42\x41\x18\x85\x51\xdc\x6b\x25\x02\x4d\xb4\x26\x4a\xa8\x26\x75\xf7\xcb\x5b\x93\x7d\x69\x7e\xb4\x39\x16\xf0\xf8\x44\xe1\xa4\xa6\xde\xdc\x6c\x72\x2c\xe0\x70\xc6\x12\x8a\x0a\x57\xed\xc7\x72\x30\xbd\x90\x87\xec\x56\x78\x7a\xff\x2e\x8b\x85\xe5\xac\xf3\x0b\x1f\x5c\xc6\x39\x63\x2f\xf8\x67\xf6\xcd\xb6\xbe\x2c\x0d\xfd\xce\xa6\xfc\xfc\x54\xbf\xe8\x9d\x1e\x45\xa0\xa7\x8e\x71\xbc\xf2\xf5\x03\xc6\xae\x9e\xbc\x8f\xab\x54\xe1\xd4\x9f\xee\x9f\xfc\xf3\x30\xa5\xa2\x51\x4b\xda\xf5\xc3\x6d\xb2\x2b\x92\x56\xc5\xbd\x7a\xc0\x73\x9e\xf4\xf1\x98\xc4\x32\xbe\x5d\x8e\x74\x58\x40\x9f\x02\x88\xc8\x48\xcd\x2b\x9d\xa5\x9f\xe6\x58\x72\x88\x76\xfe\x7c\x95\x06\xd1\x23\x3f\xad\x4a\xb4\x38\x63\xbd\xd3\x26\x64\x9f\xdb\xeb\xaf\xe5\xb4\x51\x94\x2d\x00\x2f\x46\x4a\x60\x39\xff\x17\x00\x00\xff\xff\xad\xfe\xcd\x65\x54\x03\x00\x00")

func decryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_decryptLua,
		"decrypt.lua",
	)
}

func decryptLua() (*asset, error) {
	bytes, err := decryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "decrypt.lua", size: 852, mode: os.FileMode(420), modTime: time.Unix(1556068961, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe6, 0xd, 0xb9, 0x87, 0x45, 0x3c, 0xaf, 0x90, 0xbb, 0xba, 0xef, 0x10, 0x5c, 0x4a, 0x9b, 0x7a, 0x9a, 0x68, 0x63, 0xce, 0x65, 0x5b, 0xc9, 0xaa, 0x3, 0xa7, 0xf4, 0xf8, 0xc7, 0xfb, 0x56, 0x65}}
	return a, nil
}

var _encryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x5d\x6b\xeb\x38\x10\x7d\xd7\xaf\x98\xb7\xd8\xe0\x18\xba\x6c\x0b\x5b\xf0\x43\x68\x4c\xdb\x5d\xda\x2e\x4d\x59\x58\x96\x25\x28\xf2\xdc\x78\x1a\x5b\x32\xf2\xc8\xb9\xbe\xa5\xff\xfd\x22\xc9\xf9\xea\xcb\xcd\x4b\x12\xcd\x99\x33\xe7\x1c\x8d\x3d\x9f\x43\xa9\x95\x1d\x3b\x26\xa3\xa1\x57\x96\x3a\x86\x6f\xc6\xc2\xb2\xbc\x7b\x59\x96\xf0\x68\xde\xe0\x6f\x6a\x0c\x0b\xe5\xec\x80\x50\xc0\x0c\xab\xdf\xae\xaf\xaf\xfe\x98\x09\x31\x9f\x43\x25\x59\x42\xaf\x6a\x6c\x25\xb0\x81\x41\x36\x54\x49\x46\x20\xdd\x39\x16\x3b\x1c\xfb\xf5\x54\x2d\x60\x75\xf7\x50\x3e\x2d\xf2\x57\x54\xc6\x56\xf0\x21\x00\x2a\x1c\x48\xe1\x9a\xcd\x0e\x35\xf8\xcf\x11\xb4\x62\x4b\x7a\x9b\x09\x00\x65\xda\xd6\x69\xe2\x71\x4d\xd5\xaf\x31\x9d\xdb\xec\x70\xfc\x8a\x11\x9f\x41\x2c\xb5\x9d\xb1\x0c\x52\x57\x27\xa1\x7f\x95\xff\xae\x82\x8b\x20\x16\x0a\xb0\x28\xab\xf5\x7b\x6f\x74\xe2\x4b\x19\x9c\x79\x48\x03\xcb\x16\x35\x5a\xdf\x2a\x41\xe3\x7e\xf2\xe0\x61\x9d\x24\x0b\x38\xa0\x1d\x81\xa9\x45\x31\xb9\x8b\x7a\xca\xbb\xe5\x43\xbe\xc3\x71\x8b\x3a\x09\x51\x46\x32\x3f\x0d\xb8\x46\xe8\xe4\xd8\x18\x59\xc1\x1e\x61\x4f\x4d\x03\x18\x6f\x45\x1c\xce\x0b\xf8\xf8\x3c\xfc\xf9\x6f\x76\x1e\xdc\xec\x7f\x28\x82\xca\xaf\xc7\x67\x70\xc9\x32\xc0\x96\x8b\xb7\x45\x98\xfb\x56\xe3\xa4\x7c\xd6\x43\xe7\x36\x0d\x29\xcf\x91\x5d\xc6\xed\x93\xf2\xe2\xe2\xdd\xf3\xd8\x21\x48\x8b\xc0\x56\xea\x96\x98\xb1\x02\xd2\x9e\x4d\x35\x28\x2d\x90\xee\xa9\xc2\xd0\x50\xa3\xac\xd0\x66\xb0\xaf\x49\xd5\x40\x3d\x48\xc7\x35\x6a\x26\x25\x7d\xd7\xa2\x5c\x2c\x45\xc4\x44\x63\xf1\xf7\xd1\x40\xbc\xc5\xa0\xf8\x14\xe2\x6d\x94\x99\xa4\xb7\x1b\xd9\xe3\xcd\xef\x49\x7a\x6c\x3b\x17\x7d\x16\xc7\xe5\xb1\x10\x34\x40\x01\xaf\xcf\xf7\xb9\xc6\x7d\x92\xde\x1a\xc5\xc8\xc9\xd5\xcd\x89\x87\x86\xd0\x4d\xc3\x69\x84\xb7\x37\xdd\x45\x70\xe6\xa3\xcc\x42\x30\x1b\x47\x4d\x05\xc6\x59\x30\x8e\x3b\xc7\x60\x36\xef\xa8\x58\x34\x46\xc9\x06\x7a\xec\x7b\xff\x48\x5d\x38\x98\x0e\x93\x89\xdd\xab\xcc\xbf\xee\x6e\x9a\x4e\x0c\x5e\x14\x14\xd0\xb3\x4d\x9e\x56\xf7\x79\x27\xd5\x2e\x89\x42\x8f\x10\xe3\xd8\xe7\x07\xc7\x28\x43\xcf\xa7\x30\x8e\x73\xc6\xef\x9c\x79\x44\xae\x6a\x54\xbb\xde\xb5\x87\x2d\x94\x7e\xc3\x27\x4f\xc9\x24\x29\xbb\x9c\x33\x6d\x4e\x9a\x66\x40\x43\x16\x68\x53\x21\x26\x9f\x05\xb4\xb2\x4b\x8c\xe3\x0c\xa2\x91\x74\xaa\xe4\x3f\x50\x5b\x63\xfc\xa0\x7f\xca\xd7\xd5\xe3\xcb\xf3\xa1\x80\x5a\x99\x8a\xf4\xd6\xbf\x3f\x62\xcf\xec\x50\x3a\xbc\x57\xc2\xb7\x10\x9d\x25\xcd\xc9\x9f\xab\x97\xe7\xd8\x84\x49\xc4\xa5\xe9\xcf\x00\x00\x00\xff\xff\xf0\xb4\xf2\xe2\xab\x04\x00\x00")

func encryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_encryptLua,
		"encrypt.lua",
	)
}

func encryptLua() (*asset, error) {
	bytes, err := encryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "encrypt.lua", size: 1195, mode: os.FileMode(420), modTime: time.Unix(1556072802, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x4c, 0xfb, 0xa4, 0x8b, 0x49, 0x69, 0x46, 0x4f, 0x6c, 0x49, 0x1c, 0x1b, 0x2, 0xe, 0x86, 0x83, 0xd2, 0x57, 0x89, 0x9d, 0x3c, 0x2c, 0x67, 0x6f, 0xbc, 0xff, 0xdb, 0xf2, 0x8f, 0xe3, 0x31, 0xb3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"decrypt.lua": decryptLua,

	"encrypt.lua": encryptLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"decrypt.lua": &bintree{decryptLua, map[string]*bintree{}},
	"encrypt.lua": &bintree{encryptLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
