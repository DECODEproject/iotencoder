// Code generated by go-bindata. DO NOT EDIT.
// sources:
// scripts/encrypt.lua
package lua

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _encryptLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x90\xc1\x4a\xc3\x40\x10\x86\xef\xfb\x14\x03\x1e\x92\x80\x09\x28\x56\x30\x90\x43\x41\xbd\x08\x22\xd6\x8b\xc7\x6d\x32\x24\x5b\x9b\xdd\xb8\x33\xab\xb4\x4f\x2f\xb3\xdb\x84\xd6\xe3\x7c\x3b\xdf\x3f\xb3\x53\x96\xf0\x6c\xf6\x58\x03\xda\xd6\x1f\x26\xae\xf6\x41\xab\xb2\x84\x4d\xeb\xcd\xc4\xf0\xa6\xbd\x1e\xa9\x16\x02\x8f\xeb\x8f\x35\x68\xdb\xc1\xcb\xd3\xe7\x06\x06\x4d\xc0\x0e\xb6\x08\x93\x26\xc2\x4e\x0a\x1e\x0c\x01\x45\x33\x1a\x3c\x78\x17\xfa\x01\x8e\x68\xbd\x73\xa3\xb0\x77\xe4\xe0\xed\x29\xf1\xd5\xf1\x60\x6c\x0f\xbb\x40\x0c\x93\x37\x96\x25\x85\xb8\x73\x81\xe7\x85\xb0\x8b\x83\x95\x6b\x19\x19\x1a\xf0\xf8\x1d\x8c\x47\xc8\x22\xc8\x14\xb6\xdd\x70\x8e\xa5\xce\xd4\x8e\x9c\x3d\xa7\x52\x67\x4a\x8d\xd4\x43\x03\xd1\xac\x2c\xfe\xe6\x57\x12\x5d\x08\xae\xb7\x9a\xf0\xfe\x2e\x4f\x40\x7d\xe1\x81\xa0\x01\xd1\xaa\x0e\x5b\xd7\x61\x2e\xbf\x2e\xe4\xc1\xcb\xca\x0d\xc8\xa0\x18\x92\x61\x7b\xbb\x5a\xdd\x3c\x64\x85\x52\x53\xd8\xee\x4d\x7b\x31\xa3\x38\xc1\x79\x82\x44\x57\x09\x89\xe0\xcd\x8f\x66\xfc\x6f\x24\x7a\xa9\x24\xb6\xac\x50\xa7\x8c\x7c\x8e\x5a\x70\xea\xcb\x97\x7e\x45\x48\xf2\x99\xb9\x41\x4a\xe3\xec\x22\x1e\xd3\x55\xe6\xe7\xd3\xdd\x73\x69\xbb\x86\x91\xfa\x62\x5e\x23\xee\x65\x39\x17\xa1\xf8\x0b\x00\x00\xff\xff\x6e\xb9\x69\x50\x39\x02\x00\x00")

func encryptLuaBytes() ([]byte, error) {
	return bindataRead(
		_encryptLua,
		"encrypt.lua",
	)
}

func encryptLua() (*asset, error) {
	bytes, err := encryptLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "encrypt.lua", size: 569, mode: os.FileMode(420), modTime: time.Unix(1530044020, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"encrypt.lua": encryptLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"encrypt.lua": &bintree{encryptLua, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

