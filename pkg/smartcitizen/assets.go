// Code generated by go-bindata. DO NOT EDIT.
// sources:
// files/sensors.json (15.872kB)

package smartcitizen

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _sensorsJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdb\x6e\x24\xc9\x71\x7d\xdf\xaf\x48\xd0\x10\x34\x03\x33\xa8\xbc\x56\x65\xf6\x1b\x2f\x3b\xde\x85\x96\x33\xc4\x90\x5a\x19\x16\x04\x21\x2f\x91\xdd\x89\xa9\xae\xea\xad\x0b\x39\x63\x43\x3f\xe2\x27\x7f\x87\x1f\xfd\x29\xfe\x12\x23\xab\x9b\x1c\xb2\x6f\xdb\x43\x8c\xac\x81\xc0\x37\xb2\x3a\xb3\xaa\x2b\xe2\x44\xc4\x39\x27\xfb\x4f\xdf\x11\xf2\x1f\xdf\x11\x42\xc8\x51\x0a\x47\x13\x22\x8e\x97\xff\x0c\xc3\xf8\xef\x91\xf5\x5c\x4b\x67\x05\x20\x8f\x1e\x64\x69\x14\x38\xee\x18\x28\x41\x9d\xe0\xd6\x38\xaa\xdc\xd1\x6a\xcf\xc2\xb6\x58\xf7\x7f\x19\x37\xd6\x43\x55\xad\x2e\xd7\x76\x8e\xf9\x56\x17\x3f\xdc\x70\x7e\xbf\x36\x60\xe7\xdb\xb4\xe8\x53\x53\xe7\xcf\x4e\x49\x48\xd3\xd4\xdb\x8a\xf4\x38\x5f\x60\x6b\xfb\xa1\x45\x62\xeb\x40\x66\xc3\x3c\x85\xd4\x7f\x22\x1d\xd6\x5d\xd3\x9e\x90\x1f\x7b\x32\x74\xd8\x11\x4b\xbc\x5d\x58\x9f\xfa\x74\x8b\xeb\xab\xc6\x9d\x96\xf4\x33\x6c\xe7\xa9\xeb\x9b\x96\xf4\x0d\x99\xa3\xed\xf2\x5d\xfb\x19\x92\x6e\x68\xdb\x66\xa8\x43\xaa\xa7\xc4\xa6\xf6\x78\xdc\xd0\x2d\x52\xdf\x91\x66\xe8\x89\x7d\xf8\x3a\x5d\x9a\xd6\xb6\x22\x4d\x3d\x6e\x0b\xb6\xb7\x64\x91\x6a\xf2\xaa\x6e\x88\xad\x6d\xd5\x4c\x49\xaa\x17\x43\x9f\x2f\x76\xa4\x46\x0c\x18\x5e\xdf\xbf\xe3\x50\xa7\xfe\x69\x28\x7a\x3b\xed\x8e\x26\xe4\x4f\x7f\x5e\xfd\xef\x5b\xb4\x3d\x86\xbf\xd8\xbc\xee\x88\x53\xa6\x80\x72\xa0\xfc\x86\xe9\x09\x93\x13\xa6\xfe\xed\xe1\x5e\x8b\x70\xe0\xca\xd5\x6b\xce\xb1\xbe\x7f\xf8\x77\x84\xfc\xf5\x78\x2d\xcf\x9c\xae\x25\x5a\x5a\x8e\xc6\x6b\x0a\xa5\xd4\x1e\xa4\xb4\x02\x9c\xa4\x14\xb4\xe6\x32\x2a\x1a\x98\xf1\xe1\xc0\x44\x5f\xa6\xf3\x6b\xa9\x98\xdc\x91\xeb\x7f\xb1\x1d\xb9\x1e\xd3\xf4\x75\x02\x25\xd8\x44\xd1\x83\x02\xf5\x74\xe5\x61\x81\x62\x66\x2d\x50\x26\x50\x29\xb4\x42\xd0\x4e\x95\x20\x45\xf0\x60\xbc\xc9\x15\x51\x7a\x56\x48\xe5\x4d\x81\x07\x06\xea\x87\xab\x2b\xcd\xf5\xf7\x54\x30\xf2\xea\xfa\x87\x1b\xce\x5e\xef\x08\xd9\xc5\x0a\x8d\x37\x6b\xc5\xf1\x1e\x2b\x3b\xe2\xff\x87\x7b\xfc\x6f\x0d\xec\xd1\xd1\x33\xc2\xca\xcb\x09\xdf\x1f\x56\x05\x5c\xdd\x64\xf0\xd1\x89\x2c\xbf\x34\xac\xeb\x8d\x86\x79\x66\x2c\xea\x08\xce\x18\x05\xb2\xa0\x11\x74\x69\x05\x58\x13\xa8\x67\x92\x5a\x17\xb7\x36\x9a\x87\xfc\x6c\x06\x75\x47\x30\xef\x63\xb5\x1e\xa4\xdf\x3c\x2b\x4a\x72\x22\xf6\x47\xa9\x04\xaa\x6e\x98\x99\x28\x39\x51\x72\x47\x94\x96\x91\x79\xa8\xcd\xe3\xfb\x7f\x1f\x30\xe7\x9d\x0b\xc2\x14\xa0\x5c\x10\x20\xa5\x43\xb0\xc1\x53\x28\x63\x74\xb6\x2c\x35\x2d\xf9\x7d\x71\x3e\x8a\xc4\xec\xe9\x8b\x6e\x46\xe2\x01\x3e\x0f\xed\x33\xe5\xbe\x7a\xdf\x28\x9b\x38\x36\x3d\x3b\x6f\x86\xba\xcf\xff\xcd\x9b\xd4\x8d\xd8\x4b\xcb\x76\x68\x53\x4b\xda\xfb\x7b\xf4\xcd\x78\xad\x6f\x32\x50\xb7\xec\xb9\xdf\xe0\x6d\x4d\x66\x4d\x15\x4e\xc8\x9b\xa6\x25\xa9\xee\x7a\x5b\x7b\x3c\x26\x69\xf9\xb4\x76\xe3\x3b\xdd\xd9\x8e\x28\xfa\x9b\xe3\xfc\xf1\xe7\xe7\xa6\x8e\x34\x75\xf5\x89\xcc\x6c\x15\x49\x97\x4b\x22\x47\x9e\xdc\xa5\x7e\xf6\xf0\xcc\x93\xa3\xf1\xc5\xff\xba\x15\x80\x7c\x0d\x80\xdc\x70\x1e\x38\x45\x10\x4e\x0b\x90\xc1\x68\xd0\xa5\x61\xe0\xa3\x0f\xd1\x33\x1e\xad\x31\x5f\x07\x80\x8f\xaa\x78\x1d\x83\xff\xf3\xdf\xe7\xcf\x44\x21\xe5\x87\xa1\x50\x4d\xe8\xae\x5a\x7d\x8a\x42\xb6\x81\x42\x27\xa2\x94\xae\x10\x40\x2d\x2b\x41\x06\x2d\xc1\xb9\xc8\x40\x7a\x56\x96\x85\x74\x25\x5a\xdc\x44\x61\x4e\x56\xbf\xf1\xc6\x5b\x28\xc0\xd3\x75\x1b\x50\x9c\x35\x77\x64\xd6\xf4\xa4\x69\x89\x6f\xaa\xf0\x08\x08\x23\x27\x48\xdd\x78\x65\xde\x74\x3d\xf1\xcd\x7c\x3e\x82\x63\xb5\x3d\x90\x3b\xb4\x99\x0c\x90\x85\x6d\xed\x1c\x7b\x6c\x4f\xc8\x96\xe7\x05\x5c\x60\x1d\x30\x03\xb7\x7e\x0c\xfd\x91\x1c\xf4\x2d\xd6\xd3\x7e\x76\x5f\x15\xdd\x50\x57\x69\x3a\xeb\xc9\x2c\xf5\x7d\xa6\x11\xf9\x22\xda\xb6\x9f\x2d\xc9\x84\xed\xe7\x4d\xb7\x98\x61\x9b\x3c\xf1\x4d\x1d\x52\x7e\xcf\xee\x98\x74\x83\x9f\x11\xdb\x11\x5f\x35\x43\x20\xbe\xb9\xc5\xf6\x09\xcf\x39\x26\x77\xb3\xe4\x67\xa4\x6f\xed\x82\xcc\xd0\xf6\xfb\x40\xcc\xd9\x1a\x88\x95\x63\x91\xa2\xd0\x20\x44\x61\x41\x5a\x17\xc1\x18\x6d\xa0\x30\x4e\xea\x48\x29\x2f\x30\x1e\x3c\xc5\x7d\xdb\xf8\x59\x5a\x90\xf7\x6f\x81\xed\x04\xb3\xa6\xfc\x84\x31\xe2\x7e\x37\x25\x7f\x4c\x6f\xd2\x3a\xa0\xff\x89\xd4\xd8\xdf\x35\xed\x87\xee\x4b\x70\xad\x80\xca\x1b\xc6\x26\xac\x9c\x30\x7d\x18\xae\xcb\x09\xe7\x07\xe1\xda\x6c\xe0\xda\x0b\xb4\x4a\x58\x0d\x9a\x0b\x05\x32\x50\x0f\x5a\x22\x42\xc9\x0d\x16\x36\xa0\xd2\xc6\x6f\xe2\xba\xc6\xbe\xdb\x09\xe6\x9b\x27\x7d\xf3\x8f\x09\xde\xa4\x87\x40\x90\xdb\xd4\x25\x57\x21\x71\x9f\x46\xd0\x5c\x9f\xff\x7e\x6f\xa3\x92\x1b\x94\x5c\x72\x21\x7d\x84\xc0\x5d\x09\xd2\x47\x0b\xba\x2c\x14\x98\x28\x65\x59\x22\x0f\xa8\x0e\xcd\xf1\xd9\x0f\xac\x14\xf4\xcd\xcf\xe7\xbf\xc2\x3b\x4e\xe7\x2e\xe5\xb2\xf8\x69\x44\xfc\x76\x8e\xf1\xd3\xf0\xf1\x99\xad\x4b\x15\x87\xa6\x58\x14\x07\xa5\x58\x6c\xa4\x58\x51\x6b\xa9\x14\x0c\x74\x61\x3d\x48\x21\x29\xb8\xa8\x18\xd8\x20\x8d\x46\x14\xca\x0a\xb7\x99\xe2\xb1\xc0\x77\xe6\xf8\xa7\xe1\xe3\xd6\x26\x35\xcf\x15\xbe\xec\x0d\xa9\x23\xdd\xa2\x45\x1b\xc8\xb2\xce\xc9\x34\xdd\x62\x4d\x6c\x8b\xf6\x84\x9c\x92\x38\x54\x15\x99\x37\x4d\x4d\x7c\x85\xb6\x25\xf5\xfd\x26\x3b\x8a\x13\xc2\x48\x35\x7c\x3c\xce\x33\x32\x85\x4c\xf8\x48\x13\x63\xf2\x48\xdc\x90\xaa\x51\xba\x7c\x6a\x06\x32\x74\x83\xad\xc6\x41\x78\x8b\x44\x52\x9a\xf7\xac\xf4\x8f\x6b\xc7\x1b\x06\xfb\x69\x9c\xba\x2e\xb7\xc7\x71\x12\xdb\x9a\x70\x4a\x97\x6b\xf7\x61\xcf\x94\x6b\xd8\x73\x1c\xa5\xa5\x54\x81\x77\xa5\x03\x59\xa2\x02\x6b\xb4\x03\x4d\x23\x96\xd6\x4b\xe5\x94\x3e\x14\x7b\xa7\x37\xe4\x7c\x66\xdb\xe9\x09\x79\x6f\x7b\xdc\x81\xc0\x33\xdb\xf7\xd8\x7e\x5a\xae\xcc\xaf\xfc\x78\xed\x97\x33\x37\x0d\x8c\x8d\x70\x2a\x26\x4c\xec\xed\x2d\x3b\x57\xee\x05\x9e\xde\x1c\x9a\xbe\x28\x85\xa5\x08\xa5\xb0\x01\x24\x6a\x07\x4e\x15\x01\x90\x52\xa3\x68\xc9\xbc\xa1\x6c\x13\x79\xf3\xd3\x9d\xb0\x3b\x1f\xda\x1c\xd7\x7d\x53\x61\x3d\x6b\xa5\xa3\x42\xaa\xa8\x81\x05\x9d\xb3\xe6\x28\xe8\x60\x2d\x94\x65\x30\x9c\x09\x11\x74\xdc\x4a\x6d\xb6\x64\xed\xed\x3b\x0e\x67\x92\xbf\xf9\xe7\x1f\xaf\xcf\x76\x69\xf9\x6a\x31\xb3\x59\x87\x23\x79\x9b\xfa\xb6\x99\x62\x4d\x2e\x52\xf3\x31\x63\x78\xa4\x67\x3f\xd6\x21\xdd\xa6\x30\xd8\x6a\xd5\x4a\xc8\x59\x63\xdb\xb0\x9e\xd5\xf9\xcf\x07\xa7\xb5\x18\xbb\x44\x71\x43\xf5\x84\xf2\x09\xdd\x93\xd6\x9d\x2b\xf7\xa5\xb5\xd8\xc8\x2a\xf7\xb6\x64\x46\x5a\x88\xd2\x49\x90\x4e\x29\x30\xac\x70\x10\xd0\x39\x2d\xa3\x10\xd1\x6d\x21\xe4\x75\xc3\x77\xa6\xf5\x21\x54\x61\x15\xaa\xb1\xb5\xf4\xcd\xc7\xe4\xc9\xd4\x3e\x70\x1c\x4b\x16\x4d\x55\x0d\xbd\xad\xfb\xcc\xc2\xbb\x66\x8e\x64\x68\x9d\x5d\x36\x95\x8e\x84\x61\xc9\xb4\xf1\xa3\xc7\xae\x5b\x31\xf4\x5f\x86\x94\x49\x50\x1c\xa9\xd3\x7c\x51\x61\x8f\xf9\x0f\x37\x74\xf9\xe9\xb9\x6f\xc5\x01\xab\x8e\xa4\xba\x6f\x9b\x30\x78\xec\x48\x7d\xff\x75\x52\xbd\x22\xf6\x4f\x37\xa4\xba\xc7\xb6\xb6\xd5\xe3\xcb\x58\x4f\x53\x8d\x1d\x79\xe5\x6d\xdb\x1d\x93\xbe\x1d\xfc\x87\xcc\x78\x66\x69\xd1\x9d\x9c\x9c\xbc\x1e\xbb\xd2\xa2\xb9\xc3\x96\x74\xbd\x1d\xf9\xd0\x09\xf9\xdf\xff\xfc\x2f\xf2\xb6\xe9\x71\x42\x6e\x6d\x35\x60\xee\x7d\xb9\x93\x46\xcc\xdf\x38\xd5\xe4\xfd\x35\x79\xb5\x32\x75\x5a\xec\xd2\x52\x2d\xe4\x0f\x3e\xbc\x9b\xcd\x5f\x67\x26\x65\x3f\x6b\x86\x47\x49\x24\xb1\x6d\xe6\xe3\x17\x7f\x4f\x1f\xee\xf0\xef\xd8\x36\x8f\x6e\xf3\xfa\x84\x5c\x0c\xa3\x72\x59\x7d\x9e\x03\x60\x61\xde\x04\xac\xc8\xad\x6d\x93\x75\xa9\x1a\x25\x48\xd6\x25\x99\x55\x62\x1d\xc8\xd0\x2d\xe9\x5e\xce\xc6\xce\xa7\x67\xa0\xaf\x54\x52\x67\xe7\x48\x3e\xa4\x9e\xe4\x41\x90\xea\x69\xb7\xaf\xe3\x6e\x0c\x7b\x45\x83\x0b\x5a\x83\xa3\xbe\x04\x49\x8d\x04\x1b\x4a\x09\xdc\x95\x4a\xa1\xa6\x5c\xd8\xad\x0d\x57\x6c\x33\xdf\x08\x90\x2d\xda\xe3\x6f\xae\x4e\x98\x9a\x30\xb9\x77\xc4\x1b\x60\xe5\x0d\x93\x13\xc5\x27\x8c\xbd\xa8\x93\x7f\x10\x75\xb2\x3e\x86\x14\xc6\xc0\x45\x59\x40\x51\x66\x85\x5d\x16\x0e\x5c\xd4\x0a\x54\x89\x36\xa8\xa8\x4d\xa1\xe4\x81\x63\xe8\xea\xdd\x25\x08\x2a\xe5\x15\xbc\xdf\x01\xe3\xef\x2b\xf4\x7d\x8b\x3d\x99\x67\x1d\xb3\x98\x35\xf5\x6a\xfa\x60\x7d\x8b\x55\xb3\x40\x12\x9b\xaa\x5a\x36\xa3\x91\x6c\x2d\x5a\xec\xc6\x6c\xae\x7a\xc1\xab\xba\x49\x1d\xae\x9b\xb9\x47\xe1\xec\x59\x25\x50\x4c\x24\x3b\xac\x04\x8a\x09\xdd\xe5\x51\x3e\x2d\x01\xb9\x39\x95\xb4\x64\x25\x33\x11\x0a\xa5\x11\x24\x0d\x11\x2c\x93\x16\x4a\x69\x75\x61\x83\x67\x92\xd1\x6d\x53\x29\x75\xbb\x81\x1f\xce\x7e\xdb\x3d\x00\x7d\x2d\x52\x21\x8d\x7d\x3a\x37\x64\x87\xfd\x1d\xde\xdb\x33\xb7\xd8\xda\x29\x92\xaa\xf1\xb6\xfa\xbc\x3a\xe3\x28\x7f\xfc\x70\xe1\xbe\x3f\x8e\x37\xbd\xb3\xb7\x78\x42\xc8\x29\xf9\x65\x48\xd8\x93\x2a\xb9\xd6\xb6\xa3\x21\xe5\xb0\x6a\xee\x88\xa4\xe1\xec\x38\x13\xde\x96\xcc\x9a\xa1\xc3\x47\x34\x59\xd1\x70\xb6\x62\xbc\x21\x61\x87\xd5\x72\xf4\xe4\xfb\x8f\xeb\x73\x71\x60\x4f\x0c\x0d\x67\xfb\xe0\xaa\xd6\xe0\x5a\x38\xe9\x0a\x19\x0c\x08\x2d\x19\x48\x59\x78\xb0\x65\x54\x50\x88\x28\x35\x35\x82\x3b\x53\x7c\x49\xeb\x5d\xf7\x1d\xff\x96\xb6\x24\x53\x13\x71\x60\xcb\x2d\x26\xca\xbc\xd8\x92\xdf\x8a\x2d\x59\xac\x81\x90\xa2\xf1\xc1\x2b\x07\x41\x14\x06\xa4\xd4\x14\x4c\x51\x16\xe0\xa2\x60\x36\x16\x56\x99\xb2\x3c\xb4\x67\xfe\x7c\x01\x57\x9a\xd2\x5d\x4e\xce\x4f\x17\xef\xc9\xe9\xf2\x4c\x6b\x9f\xce\x7f\x2e\x1e\xd5\xfe\xc3\xac\x07\x3c\x96\x13\x7e\xa0\xd8\x7a\x51\xf9\x5f\x47\xe5\xb3\x75\x17\x51\x5a\x27\x29\xf7\x0a\x0c\x37\x99\x74\x96\x16\x1c\x75\x1c\x4a\xaa\x8d\xe2\x34\x96\x18\xe8\x81\xa0\xbb\x6e\x2a\xdb\x92\x2b\x5b\x63\xb5\x03\x76\xe7\x43\xd7\x37\x73\x72\x9e\x5a\x3f\xa4\x7e\x1d\x6d\x87\x6b\xc0\xc7\x68\xd3\x13\xb6\xdf\x0e\x7f\x40\x9b\x3e\xd4\x0e\xdf\x54\xf6\x85\xf6\xb1\xe0\x59\xf9\xb9\x4c\x38\x29\xe5\x60\x22\x52\x28\x45\xc1\x8b\x92\x2a\xea\x4a\xb9\x89\xb6\xc5\x2d\x59\x3c\x8a\xc6\x76\xeb\xf0\xfa\xfc\xf7\xbf\xed\x48\x37\xc6\x6e\x5c\x4d\xb0\xc6\x76\xfa\x89\xdc\x36\x55\x9f\x47\xeb\xab\xbb\xdc\x74\x7c\x53\xd7\xe8\x7b\x0c\xaf\xf7\xa6\x57\xaf\xa5\xd7\xa8\xa0\x8c\x35\x0a\x44\x69\x18\x48\x2e\x3c\x58\x4e\x19\x38\x66\xbc\xe0\x65\x59\xa8\x70\xa8\x89\xf3\x77\x49\x2f\x2f\x26\xf2\xe0\x33\x37\xb1\xeb\x64\xfc\x1f\x25\xbd\x7c\xfd\x20\xcb\x07\xe3\xb8\x56\x05\x48\x6e\x39\x48\x96\xc5\xa3\x77\x12\xb8\x54\x05\x67\x45\x51\x44\xc5\x0e\x77\x7b\xc8\x45\x8a\x71\xe8\xb2\xbe\xbf\x19\xdc\x2e\xd1\xb8\xb9\xb0\x23\xaf\x7a\xec\xfa\x0d\xfe\xbc\x58\xcc\xbf\xc4\xd6\x29\x80\x15\xab\xb1\xf0\x2b\xb6\xce\xf6\x95\x2f\xb6\xce\x8b\xad\xf3\x0d\xd8\x3a\x7c\xdd\xd7\xe1\xde\xc5\xd2\xb1\x08\x8a\x16\x14\x64\x74\x0a\x6c\xc1\x39\x14\xa1\x60\x22\x2a\xcb\x7c\x21\x0e\xed\xc1\x4b\x79\x73\xea\xfb\x74\xbb\x5b\x5e\x9c\xdb\x39\xb6\x96\x5c\x8e\x2f\x93\xdf\x74\x6d\xdb\x92\xa2\x9e\x37\xf3\xc5\xd0\x63\x4b\x7e\x4e\xb9\x92\xd7\x8b\x37\x23\x80\xfc\x8e\xcc\x53\xfd\x85\x35\xac\x73\x65\xf2\x72\xc2\xf7\x1c\xf5\xec\x5c\xb9\xd7\x07\xa2\x9b\x45\x6c\x10\x3d\x45\x0a\xb2\x94\x12\x64\xe1\x15\x68\x15\x3c\x88\x68\x98\x09\xd1\x72\xeb\xb7\xb0\xc0\x95\x48\xb4\x4f\xa3\xb8\x2d\x8e\x95\x1f\xaa\x91\xd4\x3b\xdb\x61\x20\x4d\x4d\xde\x2d\xb0\x26\xe7\x3f\x13\x9f\xd5\x45\x33\xb4\xdd\x09\x79\xf5\x66\x89\x6c\xb4\xad\x9f\x91\xc5\xd0\x2e\x9a\x0e\x47\x69\xf0\x7a\x1f\x4c\xd6\x35\xa8\x10\x68\x30\xb0\x12\x04\xa7\x11\x24\x9a\x00\xae\x8c\x02\x84\x62\x22\x6a\xcd\x4b\xe5\x0e\x1d\xd5\xa7\x7f\xf8\xd7\x15\xbd\xdf\xf5\xbb\xac\xb6\xb9\xc5\x7b\x05\xb0\x32\xe6\x5f\x31\x0e\x2e\xf5\x1d\x39\xbd\x38\xdf\x68\xe5\x5f\x66\xd0\x2f\x73\x5b\x4c\xb8\x9e\xb0\x3d\xd3\x7b\xe7\xca\xbd\x28\xd8\xb4\x03\xa5\xb1\xda\x18\xad\x81\x0b\xad\x40\x5a\xc3\x41\xbb\x80\x10\xbc\xd4\x01\xb9\xa4\xd6\x6e\x41\xc1\xe9\xc5\x79\x6e\x42\x0f\x6f\xb6\xc5\x08\x0c\x01\x9a\xfa\xbe\xb3\xac\x9a\x5b\xaa\x49\x6b\xef\xf2\xb6\xdd\xb9\x15\xeb\xbf\x78\x32\x3c\x86\xe8\xa3\x84\x98\xbf\x97\xb4\x8e\x83\x29\xa5\x02\x2f\xac\xf3\x5c\x4a\xa7\xca\xad\xbf\x78\xe2\x7a\x5d\xd8\x5d\x5d\x48\xfe\xf6\x1a\xf8\x89\x82\xf3\x77\x7f\x78\x7b\xb3\x6b\x48\x0f\x73\x87\x99\xad\xb5\x7d\x5a\x62\x98\x5c\x8e\xc7\x6b\x84\x9f\xa8\xa5\x4f\xb6\x51\xf1\x8b\xfe\x77\x73\xf1\x05\x69\x66\x0c\xb8\xb9\xa1\x66\x22\xe9\x84\x9a\x7d\x69\xde\xb1\x72\x6f\x9a\x37\x2d\x2f\xaf\xd1\x07\x2b\x0b\xf0\x52\x50\x90\xde\x79\x30\x36\x48\x50\x68\xb5\xa5\xa5\x57\x9a\x6f\xb1\xbc\xae\x2e\xf3\x2b\xef\xcc\xf1\xd5\x65\x9e\x64\x75\xe8\xc6\xd9\xba\x78\x14\xaf\xf9\x18\xaf\xc9\xd2\x52\xc0\x76\x3e\x2e\xb0\x64\x9e\x3e\xf6\x2b\x6d\xd8\x35\x55\x0a\xab\x3d\x55\x9e\x7b\x75\x20\x55\xfa\x65\x48\x81\x84\xb6\xc9\x43\x3a\xdf\x35\xeb\xbe\xcf\x6e\xc5\x09\xb9\xce\x03\xff\x61\xd3\x67\x1f\x36\x0c\x5d\x7f\x4c\x42\x6a\xfb\x63\xd2\x35\x4d\x7f\x4c\x9a\x96\x74\xf3\xe6\x03\x1e\x8f\x13\xb5\xb2\xed\x14\xf3\xb5\x60\xdb\x0f\x04\xeb\x66\x98\xce\xf2\xe0\x73\x48\x3a\xc4\x7a\xd9\xd4\xf3\x53\x6a\xfb\x01\x03\xc1\x4f\x7b\xcd\x07\xbe\xfe\x5b\x47\xaf\x39\x97\x56\x95\xe0\xf3\xa8\x92\x65\x30\xa0\x83\x89\xa0\x5d\x29\x28\x97\xa5\x36\xe6\xd0\x29\x75\xf9\xfd\xe5\x35\xb9\x4c\x7e\x07\x36\xc7\x8f\xbf\xba\x55\x7b\xf8\x71\xc5\x88\x47\xa6\x6e\x38\x9d\x28\x3a\xe1\xe2\x57\x90\xbb\x6d\xe5\x8b\x57\xfb\xff\xe7\xd5\xf2\x75\x9f\x4c\x47\xe9\xb4\xe0\x1e\xa2\x29\x05\x48\xab\x3d\x58\x17\x24\x94\x58\xb8\x58\x30\x67\xbd\xde\x6a\xd6\xee\x3c\xe2\x16\xdf\xf6\x11\xf7\x1e\x7b\x63\xe7\xca\x17\x2d\xf4\xa2\x85\xbe\x05\x2d\xb4\xee\x47\x69\x15\x85\xe5\x26\x00\x1d\x09\xbb\x90\x1a\xac\x46\x04\x65\xbc\x0c\x82\x0a\xa7\xf8\xa1\xb5\x7b\x75\x75\x01\x99\x0b\xed\xa8\xdb\xeb\x59\xaa\x3f\x61\x22\xef\x16\x7d\xca\xfd\xee\x3c\x13\xf6\x4c\x89\x2e\x77\x98\xdd\xcf\x2e\x50\xbe\x97\xfb\xec\x58\xb9\x97\xfb\x6c\x1e\xbf\x30\xea\x69\x11\xed\x28\x1a\x35\xc8\x42\x21\x98\x48\x0b\x70\x85\x97\xde\x47\x2e\x19\xdd\xca\x7d\x5e\x78\xcf\x3a\x35\x5f\xb7\xd0\x1c\x8b\x02\x83\xf4\x60\xb4\xb0\x20\x4d\x34\x60\x64\x54\x60\x63\x2c\x4a\x11\xac\xd5\xd1\x6e\xa5\xe6\xc5\x9e\x59\x02\xe7\xef\xde\x3e\x63\x9e\x2c\x9a\xae\x27\x8b\xb6\xc9\xcd\x0e\x03\xf1\x4d\xed\x31\xd7\x70\xbf\x45\x9f\x0f\xd3\x67\xb2\x75\xa1\x1e\xff\xf0\x62\x1f\x5b\x7f\xba\xf2\x65\xa4\xbc\x8c\x94\x6f\x60\xa4\x88\x75\xdf\x24\x44\x5f\x84\x20\x15\x48\x1f\x15\xc8\xe0\x04\x68\x27\x18\x50\xc5\x8d\x94\x51\x62\x34\x5b\x7f\x6a\xb2\x53\x5b\x33\xfa\x4c\x69\xcd\xe8\x57\x57\xd6\xfc\x60\x65\xcd\x0f\x56\xd6\x9b\x87\xa9\x82\xa2\x72\x05\x93\x60\x5d\x89\x20\x0b\xe7\xc1\x15\xb1\x84\x68\x8d\x15\xd4\xf0\xc2\xa3\xd9\xaa\xac\x1f\xeb\x96\x97\x01\xb3\xc4\xe7\xba\xfd\x2b\x0d\x0f\xbc\xe0\x14\x18\xd3\x12\xa4\x77\x14\xac\x34\x05\x50\x29\x43\x59\xfa\x10\x0b\xa7\x9e\xe1\xfd\xec\x9a\x2f\xe7\x8f\x87\xc6\x97\x19\x40\xcf\x1e\x29\x92\x1d\x0c\x53\xf6\x62\x00\xfd\x7d\x70\xfa\xdd\x9f\xff\x2f\x00\x00\xff\xff\xb9\x3e\x9e\xf5\x00\x3e\x00\x00")

func sensorsJsonBytes() ([]byte, error) {
	return bindataRead(
		_sensorsJson,
		"sensors.json",
	)
}

func sensorsJson() (*asset, error) {
	bytes, err := sensorsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sensors.json", size: 15872, mode: os.FileMode(420), modTime: time.Unix(1543093243, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x86, 0x3a, 0x48, 0x60, 0x6, 0x39, 0xbc, 0x97, 0xeb, 0xad, 0x48, 0x65, 0x1f, 0xa8, 0xff, 0x3d, 0x60, 0xfe, 0x7e, 0xc4, 0xa5, 0x4c, 0x81, 0x8e, 0x86, 0x57, 0x4d, 0x1c, 0x6a, 0x0, 0x29, 0x49}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"sensors.json": sensorsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"sensors.json": &bintree{sensorsJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
